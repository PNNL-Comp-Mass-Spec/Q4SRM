<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PRISM</name>
    </assembly>
    <members>
        <member name="T:PRISM.clsDBTools">
            <summary>
            Tools to retrieve data from a database
            </summary>
        </member>
        <member name="F:PRISM.clsDBTools.DEFAULT_SP_TIMEOUT_SEC">
            <summary>
            Default timeout length, in seconds, when waiting for a query to finish running
            </summary>
        </member>
        <member name="F:PRISM.clsDBTools.mTimeoutSeconds">
            <summary>
            Timeout length, in seconds, when waiting for a query to finish running
            </summary>
        </member>
        <member name="P:PRISM.clsDBTools.ConnectStr">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="P:PRISM.clsDBTools.TimeoutSeconds">
            <summary>
            Timeout length, in seconds, when waiting for a query to finish executing
            </summary>
        </member>
        <member name="M:PRISM.clsDBTools.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString">Database connection string</param>
        </member>
        <member name="M:PRISM.clsDBTools.GetColumnMapping(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Get a mapping from column name to column index, based on column order
            </summary>
            <param name="columns"></param>
            <returns>Mapping from column name to column index</returns>
            <remarks>Use in conjunction with GetColumnValue, e.g. GetColumnValue(resultRow, columnMap, "ID")</remarks>
        </member>
        <member name="M:PRISM.clsDBTools.GetColumnValue(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.String)">
            <summary>
            Get the string value for the specified column
            </summary>
            <param name="resultRow">Row of results, as returned by GetQueryResults</param>
            <param name="columnMap">Map of column name to column index, as returned by GetColumnMapping</param>
            <param name="columnName">Column Name</param>
            <returns>String value</returns>
            <remarks>The returned value could be null, but note that GetQueryResults converts all Null strings to string.empty</remarks>
        </member>
        <member name="M:PRISM.clsDBTools.GetColumnValue(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.String,System.Int32)">
            <summary>
            Get the integer value for the specified column, or the default value if the value is empty or non-numeric
            </summary>
        </member>
        <member name="M:PRISM.clsDBTools.GetColumnValue(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.String,System.Int32,System.Boolean@)">
            <summary>
            Get the integer value for the specified column, or the default value if the value is empty or non-numeric
            </summary>
            <param name="resultRow">Row of results, as returned by GetQueryResults</param>
            <param name="columnMap">Map of column name to column index, as returned by GetColumnMapping</param>
            <param name="columnName">Column Name</param>
            <param name="defaultValue">Default value</param>
            <param name="validNumber">Output: set to true if the column contains an integer</param>
            <returns>Integer value</returns>
        </member>
        <member name="M:PRISM.clsDBTools.GetColumnValue(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.String,System.Double)">
            <summary>
            Get the double value for the specified column, or the default value if the value is empty or non-numeric
            </summary>
        </member>
        <member name="M:PRISM.clsDBTools.GetColumnValue(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.String,System.Double,System.Boolean@)">
            <summary>
            Get the double value for the specified column, or the default value if the value is empty or non-numeric
            </summary>
            <param name="resultRow">Row of results, as returned by GetQueryResults</param>
            <param name="columnMap">Map of column name to column index, as returned by GetColumnMapping</param>
            <param name="columnName">Column Name</param>
            <param name="defaultValue">Default value</param>
            <param name="validNumber">Output: set to true if the column contains a double (or integer)</param>
            <returns>Double value</returns>
        </member>
        <member name="M:PRISM.clsDBTools.GetColumnValue(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.String,System.DateTime)">
            <summary>
            Get the date value for the specified column, or the default value if the value is empty or non-numeric
            </summary>
        </member>
        <member name="M:PRISM.clsDBTools.GetColumnValue(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.String,System.DateTime,System.Boolean@)">
            <summary>
            Get the date value for the specified column, or the default value if the value is empty or non-numeric
            </summary>
            <param name="resultRow">Row of results, as returned by GetQueryResults</param>
            <param name="columnMap">Map of column name to column index, as returned by GetColumnMapping</param>
            <param name="columnName">Column Name</param>
            <param name="defaultValue">Default value</param>
            <param name="validNumber">Output: set to true if the column contains a valid date</param>
            <returns>True or false</returns>
        </member>
        <member name="M:PRISM.clsDBTools.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            The subroutine is an event handler for InfoMessage event.
            </summary>
            <remarks>
            The errors and warnings sent from the SQL server are caught here
            </remarks>
        </member>
        <member name="M:PRISM.clsDBTools.GetDiscDataSet(System.String,System.Data.DataSet@,System.Int32@)">
            <summary>
            The function gets a disconnected dataset as specified by the SQL statement.
            </summary>
            <param name="sqlQuery">A SQL string.</param>
            <param name="DS">A dataset.</param>
            <param name="rowCount">A row counter.</param>
            <return>Returns a disconnected dataset as specified by the SQL statement.</return>
        </member>
        <member name="M:PRISM.clsDBTools.GetQueryResults(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.String}}@,System.String,System.Int16,System.Int32,System.Int32)">
            <summary>
            Run a query against a SQL Server database, return the results as a list of strings
            </summary>
            <param name="sqlQuery">Query to run</param>
            <param name="lstResults">Results (list of list of strings)</param>
            <param name="callingFunction">Name of the calling function (for logging purposes)</param>
            <param name="retryCount">Number of times to retry (in case of a problem)</param>
            <param name="maxRowsToReturn">Maximum rows to return; 0 to return all rows</param>
            <param name="retryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
            <returns>True if success, false if an error</returns>
            <remarks>
            Uses the connection string passed to the constructor of this class
            Null values are converted to empty strings
            Numbers are converted to their string equivalent
            By default, retries the query up to 3 times
            </remarks>
        </member>
        <member name="M:PRISM.clsDBTools.UpdateDatabase(System.String,System.Int32@)">
            <summary>
            The function updates a database table as specified in the SQL statement.
            </summary>
            <param name="SQL">A SQL string.</param>
            <param name="affectedRows">Affected Rows to be updated.</param>
            <return>Returns Boolean showing if the database was updated.</return>
        </member>
        <member name="T:PRISM.clsEventNotifier">
            <summary>
            This class implements various status events, including status, debug, error, and warning
            </summary>
        </member>
        <member name="E:PRISM.clsEventNotifier.DebugEvent">
            <summary>
            Debug event
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.DebugEventEventHandler">
            <summary>
            Debug event
            </summary>
            <param name="message"></param>
        </member>
        <member name="E:PRISM.clsEventNotifier.ErrorEvent">
            <summary>
            Error event
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.ErrorEventEventHandler">
            <summary>
            Error event
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="E:PRISM.clsEventNotifier.ProgressUpdate">
            <summary>
            Progress updated
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.ProgressUpdateEventHandler">
            <summary>
            Progress updated
            </summary>
            <param name="progressMessage"></param>
            <param name="percentComplete">Value between 0 and 100</param>
        </member>
        <member name="E:PRISM.clsEventNotifier.StatusEvent">
            <summary>
            Status event
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.StatusEventEventHandler">
            <summary>
            Status event
            </summary>
            <param name="message"></param>
        </member>
        <member name="E:PRISM.clsEventNotifier.WarningEvent">
            <summary>
            Warning event
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.WarningEventEventHandler">
            <summary>
            Warning event
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:PRISM.clsEventNotifier.SkipConsoleWriteIfNoDebugListener">
            <summary>
            If WriteToConsoleIfNoListener is true, optionally set this to true to not write debug messages to the console if no listener
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.SkipConsoleWriteIfNoErrorListener">
            <summary>
            If WriteToConsoleIfNoListener is true, optionally set this to true to not write errors to the console if no listener
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.SkipConsoleWriteIfNoProgressListener">
            <summary>
            If WriteToConsoleIfNoListener is true, optionally set this to true to not write progress updatess to the console if no listener
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.SkipConsoleWriteIfNoStatusListener">
            <summary>
            If WriteToConsoleIfNoListener is true, optionally set this to true to not write status messages to the console if no listener
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.SkipConsoleWriteIfNoWarningListener">
            <summary>
            If WriteToConsoleIfNoListener is true, optionally set this to true to not write warnings to the console if no listener
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.WriteToConsoleIfNoListener">
            <summary>
            If true, and if an event does not have a listener, display the message at the console
            </summary>
            <remarks>Defaults to true. Silence individual event types using the SkipConsoleWrite properties</remarks>
        </member>
        <member name="P:PRISM.clsEventNotifier.HasEventListenerDebug">
            <summary>
            True if the Debug event has any listeners
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.HasEventListenerError">
            <summary>
            True if the Error event has any listeners
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.HasEventListenerProgressUpdate">
            <summary>
            True if the ProgressUpdate event has any listeners
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.HasEventListenerStatusEvent">
            <summary>
            True if the StatusEvent event has any listeners
            </summary>
        </member>
        <member name="P:PRISM.clsEventNotifier.HasEventListenerWarningEvent">
            <summary>
            True if the WarningEvent event has any listeners
            </summary>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnDebugEvent(System.String)">
            <summary>
            Report a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnErrorEvent(System.String)">
            <summary>
            Report an error
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnErrorEvent(System.String,System.Exception)">
            <summary>
            Report an error
            </summary>
            <param name="message"></param>
            <param name="ex">Exception (allowed to be nothing)</param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnProgressUpdate(System.String,System.Single)">
            <summary>
            Progress update
            </summary>
            <param name="progressMessage">Progress message</param>
            <param name="percentComplete">Value between 0 and 100</param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnStatusEvent(System.String)">
            <summary>
            Report a status message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnWarningEvent(System.String)">
            <summary>
            Report a warning
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.RegisterEvents(PRISM.clsEventNotifier)">
            <summary>
            Use this method to chain events between classes
            </summary>
            <param name="sourceClass"></param>
        </member>
        <member name="T:PRISM.clsExecuteDatabaseSP">
            <summary>
            Tools to execute a stored procedure
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.RET_VAL_OK">
            <summary>
            Return value indicating everything is ok
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.RET_VAL_EXCESSIVE_RETRIES">
            <summary>
            Typically caused by timeout expired
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.RET_VAL_DEADLOCK">
            <summary>
            Typically caused by transaction (Process ID 143) was deadlocked on lock resources with another process and has been chosen as the deadlock victim
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.DEFAULT_SP_RETRY_COUNT">
            <summary>
            Default number of times to retry calling the stored prcoedure
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.DEFAULT_SP_RETRY_DELAY_SEC">
            <summary>
            Default delay, in seconds, when retrying a stored procedure call
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.DEFAULT_SP_TIMEOUT_SEC">
            <summary>
            Default timeout length, in seconds, when waiting for a stored procedure to finish executing
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.mTimeoutSeconds">
            <summary>
            Timeout length, in seconds, when waiting for a stored procedure to finish executing
            </summary>
        </member>
        <member name="P:PRISM.clsExecuteDatabaseSP.DBconnectionString">
            <summary>
            Database connection string
            </summary>
        </member>
        <member name="P:PRISM.clsExecuteDatabaseSP.DebugMessagesEnabled">
            <summary>
            Set to True to raise debug events
            </summary>
        </member>
        <member name="P:PRISM.clsExecuteDatabaseSP.TimeoutSeconds">
            <summary>
            Timeout length, in seconds, when waiting for a stored procedure to finish executing
            </summary>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Event handler for InfoMessage event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <remarks>Errors and warnings from SQL Server are caught here</remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Collections.Generic.List{System.Collections.Generic.List{System.String}}@,System.Int16,System.Int32,System.Int32)">
            <summary>
            Method for executing a db stored procedure if a data table is to be returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="lstResults">If SP successful, contains Results (list of list of strings)</param>
            <param name="retryCount">Maximum number of times to attempt to call the stored procedure</param>
            <param name="maxRowsToReturn">Maximum rows to return; 0 for no limit</param>
            <param name="retryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand)">
            <summary>
            Method for executing a db stored procedure, assuming no data table is returned; will retry the call to the procedure up to DEFAULT_SP_RETRY_COUNT=3 times
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32)">
            <summary>
            Method for executing a db stored procedure, assuming no data table is returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32,System.Int32)">
            <summary>
            Method for executing a db stored procedure, assuming no data table is returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <param name="retryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32,System.String@)">
            <summary>
            Method for executing a db stored procedure when a data table is not returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <param name="errorMessage">Error message (output)</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks>No logging is performed by this procedure</remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32,System.String@,System.Int32)">
            <summary>
            Method for executing a db stored procedure when a data table is not returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <param name="errorMessage">Error message (output)</param>
            <param name="retryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks>No logging is performed by this procedure</remarks>
        </member>
        <member name="T:PRISM.clsLinuxSystemInfo">
            <summary>
            Methods to determine memory usage, CPU usage, and Linux system version
            </summary>
        </member>
        <member name="F:PRISM.clsLinuxSystemInfo.ROOT_PROC_DIRECTORY">
            <summary>
            Path to proc virtual filesystem
            </summary>
        </member>
        <member name="F:PRISM.clsLinuxSystemInfo.CPUINFO_FILE">
            <summary>
            Name of cpuinfo file
            </summary>
        </member>
        <member name="F:PRISM.clsLinuxSystemInfo.MEMINFO_FILE">
            <summary>
            name of meminfo file
            </summary>
        </member>
        <member name="P:PRISM.clsLinuxSystemInfo.TraceEnabled">
            <summary>
            When true, additional debug messages are reported using DebugEvent
            </summary>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="limitLoggingByTimeOfDay">When true, only log errors between 12 am and 12:30 am</param>
            <remarks>
            To view debug events raised by this class, either subscribe to event DebugEvent
            or set SkipConsoleWriteIfNoDebugListener to false
            </remarks>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.ComputeTotalCPUTime">
            <summary>
            Compute total CPU time (sum of processing times, idle times, wait times, etc.)
            </summary>
            <returns>Total CPU time, in jiffies</returns>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.ComputeTotalCPUTime(System.Int64@)">
            <summary>
            Compute total CPU time (sum of processing times, idle times, wait times, etc.)
            </summary>
            <param name="idleTime">Idle time, in jiffies (sum of idle and iowait times)</param>
            <returns>Total CPU time, in jiffies</returns>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.ExtractCPUTimes(System.IO.FileSystemInfo,System.Int64@,System.Int64@)">
            <summary>
            Parse utime and stime from a stat file for a given process
            </summary>
            <param name="statFile"></param>
            <param name="utime">Amount of time that the process has been scheduled in user mode, in jiffies</param>
            <param name="stime">Amount of time that the process has been scheduled in kernel mode, in jiffies</param>
            <returns>True if success, false if an error</returns>
            <remarks>
            For multithreaded applications, the task folder below the ProcessID folder will have
            separate ProcessID folders for each thread.  Those folders could be parsed to determine
            the processing time for each thread.  However, the stat file in the base ProcessID folder
            has the combined processing time for all threads, so parsing of individual thread stat times
            is not necessary to determine overall processing time.
            </remarks>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.ExtractID(System.Text.RegularExpressions.Regex,System.String,System.Int32@)">
            <summary>
            Match the dataline with the Regex matcher
            If success, extract the ID group, returning the integer via parameter id
            </summary>
            <param name="reIdMatcher"></param>
            <param name="dataLine"></param>
            <param name="id">Output: matched ID, or 0 if no match</param>
            <returns>True if success, otherwise false</returns>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetCoreCount">
            <summary>
            Report the number of cores on this system
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>
            Should not be affected by hyperthreading, so a computer with two 8-core chips will report 16 cores, even if Hyperthreading is enabled
            The computed core count is cached to avoid needing to re-parse /proc/cpuinfo repeatedly
            </remarks>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetLogicalCoreCount">
            <inheritdoc />
            <summary>
            Report the number of logical cores on this system
            </summary>
            <returns>The number of logical cores on this computer</returns>
            <remarks>
            Will be affected by hyperthreading, so a computer with two 8-core chips will report 32 cores if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetProcessorPackageCount">
            <inheritdoc />
            <summary>
            Report the number of processor packages on this system
            </summary>
            <returns>The number of processor packages on this computer</returns>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetNumaNodeCount">
            <inheritdoc />
            <summary>
            Report the number of NUMA Nodes on this system
            </summary>
            <returns>The number of NUMA Nodes on this computer</returns>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetCoreUsageByProcessName(System.String,System.String,System.Collections.Generic.List{System.Int32}@,System.Single)">
            <summary>
            Reports the number of cores in use by the given process
            This method takes at least 1000 msec to execute
            </summary>
            <param name="processName">
            Process name, for example mono (full matches only; partial matches are ignored)
            Can either be just a program name like mono, or the full path to the program (e.g. /usr/local/bin/mono)</param>
            <param name="argumentText">Optional text to require is contained in one of the command line arguments passed to the program</param>
            <param name="processIDs">Output: list of matching process IDs</param>
            <param name="samplingTimeSeconds">Time (in seconds) to wait while determining CPU usage; default 1, minimum 0.1, maximum 10</param>
            <returns>Number of cores in use; -1 if process not found or if a problem</returns>
            <remarks>
            Core count is typically an integer, but can be a fractional number if not using a core 100%
            If multiple processes are running with the given name, returns the total core usage for all of them
            </remarks>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetCoreUsageByProcessID(System.Int32,System.Single@,System.Single)">
            <summary>
            Determine the core usage for a given process
            </summary>
            <param name="processID"></param>
            <param name="cpuUsageTotal">Output: Total CPU usage (value between 0 and 100)</param>
            <param name="samplingTimeSeconds">Time (in seconds) to wait while determining CPU usage; default 1, minimum 0.1, maximum 10</param>
            <returns>Core usage, or 0 if process not found</returns>
            <remarks>If a single core was 100% utilized, this method returns 1</remarks>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetCoreUsageByProcessID(System.Collections.Generic.List{System.Int32},System.Single@,System.Single)">
            <summary>
            Determine the total core usage for a list of Process IDs
            </summary>
            <param name="processIDs">List of Process IDs to examine</param>
            <param name="cpuUsageTotal">Output: Total CPU usage (value between 0 and 100)</param>
            <param name="samplingTimeSeconds">Time (in seconds) to wait while determining CPU usage; default 1, minimum 0.1, maximum 10</param>
            <returns>Core usage, or 0 if process not found</returns>
            <remarks>If a single core was 100% utilized, this method returns 1</remarks>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetCPUUtilization(System.Single)">
            <summary>
            Returns the CPU usage
            </summary>
            <returns>Value between 0 and 100</returns>
            <remarks>
            <param name="samplingTimeSeconds">Time (in seconds) to wait while determining CPU usage; default 1, minimum 0.1, maximum 10</param>
            This is CPU usage for all running applications, not just this application
            For CPU usage of a single application use GetCoreUsageByProcessID()
            </remarks>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetFreeMemoryMB">
            <summary>
            Determine the free system memory, in MB, on Linux
            </summary>
            <returns>Free memory, or -1 if an error</returns>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetTotalMemoryMB">
            <summary>
            Determine the total system memory, in MB
            </summary>
            <returns>Total memory, or -1 if an error</returns>
        </member>
        <member name="M:PRISM.clsLinuxSystemInfo.GetLinuxVersion">
            <summary>
            Determine the version of Linux that we're running
            </summary>
            <returns>String describing the OS version</returns>
        </member>
        <member name="T:PRISM.clsOSVersionInfo">
            <summary>
            Class for determining the currently running operating system
            Based on https://code.msdn.microsoft.com/windowsapps/How-to-determine-the-263b1850
            </summary>
            <remarks>For Windows and Linux, reports details about the OS version</remarks>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.GetOSVersion">
            <summary>
            Determine the operating system version
            </summary>
            <returns>Human-readable description of the OS version</returns>
            <remarks>For Windows and Linux, reports details about the OS version</remarks>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.GetLinuxVersion">
            <summary>
            Determine the version of Linux that we're running
            </summary>
            <returns>String describing the OS version</returns>
            <remarks>
            If run on Windows, will look for files in the \etc folder on the current drive
            If that folder does not exist, will return "Unknown Windows OS"
            </remarks>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.GetFirstLineVersion(System.String,System.String)">
            <summary>
            Return the first line of an operating system version file
            </summary>
            <param name="versionFilePath"></param>
            <param name="osName">Operating system name (empty by default); if non-blank, the version returned is guaranteed to contain this text</param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.GetOSReleaseVersion(System.String)">
            <summary>
            Parse version information from an os-release file
            </summary>
            <param name="osReleaseFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.GetUbuntuVersion(System.String)">
            <summary>
            Parse version information from an Ubuntu lsb-release file
            </summary>
            <param name="lsbReleaseFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.GetWin32Version(System.OperatingSystem)">
            <summary>
            For old windows kernel
            </summary>
            <param name="osInfo"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.GetWinNTVersion(System.OperatingSystem)">
            <summary>
            For NT kernel
            </summary>
            <param name="osInfo"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.ReadReleaseFile(System.IO.StreamReader)">
            <summary>
            Read a Linux os-release file or similar release file
            where the contents are expected to be in the form KEY=Value
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsOSVersionInfo.StripQuotes(System.String)">
            <summary>
            Remove leading and trailing double quotes
            </summary>
            <param name="dataLine"></param>
            <returns></returns>
        </member>
        <member name="T:PRISM.clsParseCommandLine">
            <summary>
            Parse command line switches
            </summary>
        </member>
        <member name="F:PRISM.clsParseCommandLine.DEFAULT_SWITCH_CHAR">
            <summary>
            Default switch char
            </summary>
        </member>
        <member name="F:PRISM.clsParseCommandLine.ALTERNATE_SWITCH_CHAR">
            <summary>
            Alternate switch char
            </summary>
        </member>
        <member name="F:PRISM.clsParseCommandLine.DEFAULT_SWITCH_PARAM_CHAR">
            <summary>
            Default character between the switch name and a value to associate with the parameter
            </summary>
        </member>
        <member name="P:PRISM.clsParseCommandLine.NeedToShowHelp">
            <summary>
            If true, we need to show the syntax to the user due to a switch error, invalid switch, or the presence of /? or /help
            </summary>
        </member>
        <member name="P:PRISM.clsParseCommandLine.NoParameters">
            <summary>
            This will be true after calling ParseCommandLine if the command line has no arguments (either non-switch or switch based)
            </summary>
        </member>
        <member name="P:PRISM.clsParseCommandLine.ParameterCount">
            <summary>
            Number of switches
            </summary>
        </member>
        <member name="P:PRISM.clsParseCommandLine.NonSwitchParameterCount">
            <summary>
            Number of parameters that are not preceded by a switch
            </summary>
        </member>
        <member name="P:PRISM.clsParseCommandLine.DebugMode">
            <summary>
            Set to true to see extra debug information
            </summary>
        </member>
        <member name="M:PRISM.clsParseCommandLine.InvalidParametersPresent(System.Collections.Generic.List{System.String})">
            <summary>
            Compares the parameter names in objParameterList with the parameters at the command line
            </summary>
            <param name="parameterList">Parameter list</param>
            <returns>True if any of the parameters are not present in parameterList()</returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.InvalidParametersPresent(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compares the parameter names in parameterList with the parameters at the command line
            </summary>
            <param name="parameterList">Parameter list</param>
            <returns>True if any of the parameters are not present in parameterList()</returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.InvalidParametersPresent(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Compares the parameter names in parameterList with the parameters at the command line
            </summary>
            <param name="parameterList">Parameter list</param>
            <param name="caseSensitive">True to perform case-sensitive matching of the parameter name</param>
            <returns>True if any of the parameters are not present in parameterList()</returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.InvalidParametersPresent(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Validate that the user-provided parameters are in the validParameters list
            </summary>
            <param name="validParameters"></param>
            <param name="caseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.InvalidParameters(System.Collections.Generic.List{System.String})">
            <summary>
            Retrieve a list of the user-provided parameters that are not in validParameters
            </summary>
            <param name="validParameters"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.InvalidParameters(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Retrieve a list of the user-provided parameters that are not in validParameters
            </summary>
            <param name="validParameters"></param>
            <param name="caseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.IsParameterPresent(System.String)">
            <summary>
            Look for parameter on the command line
            </summary>
            <param name="paramName">Parameter name</param>
            <returns>True if present, otherwise false</returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.ParseCommandLine">
            <summary>
            Parse the parameters and switches at the command line; uses / for the switch character and : for the switch parameter character
            </summary>
            <returns>Returns True if any command line parameters were found; otherwise false</returns>
            <remarks>
            If /? or /help is found, returns False and sets mShowHelp to True
            If there are no arguments at the commandline, returns false, but sets NoArgumentsProvided to true
            </remarks>
        </member>
        <member name="M:PRISM.clsParseCommandLine.ParseCommandLine(System.Char)">
            <summary>
            Parse the parameters and switches at the command line; uses : for the switch parameter character
            </summary>
            <returns>Returns True if any command line parameters were found; otherwise false</returns>
            <remarks>
            If /? or /help is found, returns False and sets mShowHelp to True
            If there are no arguments at the commandline, returns false, but sets NoArgumentsProvided to true
            </remarks>
        </member>
        <member name="M:PRISM.clsParseCommandLine.ParseCommandLine(System.Char,System.Char)">
            <summary>
            Parse the parameters and switches at the command line
            </summary>
            <param name="switchStartChar"></param>
            <param name="switchParameterChar"></param>
            <returns>Returns True if any command line parameters were found; otherwise false</returns>
            <remarks>
            If /? or /help is found, returns False and sets mShowHelp to True
            If there are no arguments at the commandline, returns false, but sets NoArgumentsProvided to true
            </remarks>
        </member>
        <member name="M:PRISM.clsParseCommandLine.PauseAtConsole(System.Int32,System.Int32)">
            <summary>
            Pause the program for the specified number of milliseconds, displaying a period at a set interval while paused
            </summary>
            <param name="millisecondsToPause">Milliseconds to pause; default 5 seconds</param>
            <param name="millisecondsBetweenDots">Seconds between each period; default 1 second</param>
        </member>
        <member name="M:PRISM.clsParseCommandLine.RetrieveNonSwitchParameter(System.Int32)">
            <summary>
            Returns the value of the non-switch parameter at the given index
            </summary>
            <param name="parameterIndex">Parameter index</param>
            <returns>The value of the parameter at the given index; empty string if no value or invalid index</returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.RetrieveParameter(System.Int32,System.String@,System.String@)">
            <summary>
            Returns the parameter at the given index
            </summary>
            <param name="parameterIndex">Parameter index</param>
            <param name="paramName">Parameter name (output)</param>
            <param name="paramValue">Value associated with the parameter; empty string if no value (output)</param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.RetrieveValueForParameter(System.String,System.String@)">
            <summary>
            Look for parameter on the command line and returns its value in paramValue
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="paramValue">Value associated with the parameter; empty string if no value (output)</param>
            <returns>True if present, otherwise false</returns>
        </member>
        <member name="M:PRISM.clsParseCommandLine.RetrieveValueForParameter(System.String,System.String@,System.Boolean)">
            <summary>
            Look for parameter on the command line and returns its value in paramValue
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="paramValue">Value associated with the parameter; empty string if no value (output)</param>
            <param name="caseSensitive">True to perform case-sensitive matching of the parameter name</param>
            <returns>True if present, otherwise false</returns>
        </member>
        <member name="T:PRISM.clsPathUtils">
            <summary>
            Cross-platform path utilities
            </summary>
        </member>
        <member name="M:PRISM.clsPathUtils.AssureLinuxPath(System.String)">
            <summary>
            Convert a path to be linux-compatible (backslash to forward slash
            </summary>
            <param name="pathSpec"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsPathUtils.AssureWindowsPath(System.String)">
            <summary>
            Convert a path to be Windows-compatible (forward slash to backslash
            </summary>
            <param name="pathSpec"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsPathUtils.CombinePathsLocalSepChar(System.String,System.String)">
            <summary>
            Combine paths using the system default path separator character
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsPathUtils.CombineLinuxPaths(System.String,System.String)">
            <summary>
            Combine paths using a forward slash as a path separator character
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsPathUtils.CombineWindowsPaths(System.String,System.String)">
            <summary>
            Combine paths using a backslash as a path separator character
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsPathUtils.CombinePaths(System.String,System.String,System.Char)">
            <summary>
            Combine paths using the specified path separator character
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <param name="directorySepChar"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsPathUtils.CompactPathString(System.String,System.Int32)">
            <summary>
            Shorten pathToCompact to a maximum length of maxLength
            Examples:
            C:\...\B..\Finance..
            C:\...\W..\Business\Finances.doc
            C:\My Docum..\Word\Business\Finances.doc
            </summary>
            <param name="pathToCompact"></param>
            <param name="maxLength">Maximum length of the shortened path</param>
            <returns>Shortened path</returns>
        </member>
        <member name="M:PRISM.clsPathUtils.FindFilesWildcard(System.String,System.Boolean)">
            <summary>
            Find all files that match the given file name pattern, optionally recursing
            </summary>
            <param name="pathSpec">Folder/file search specification, e.g. C:\Windows\*.ini</param>
            <param name="recurse">True to recurse</param>
            <returns>List of FileInfo objects (empty list if the directory does not exist)</returns>
            <remarks>When recursing, skips folders for which the user does not have permission</remarks>
        </member>
        <member name="M:PRISM.clsPathUtils.FindFilesWildcard(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Find all files that match the given file name pattern in the given directory, optionally recursing
            </summary>
            <param name="folder">Folder to search</param>
            <param name="fileMask">Filename mask to find, e.g. *.txt</param>
            <param name="recurse">True to recurse</param>
            <returns>List of FileInfo objects (empty list if the directory does not exist)</returns>
            <remarks>When recursing, skips folders for which the user does not have permission</remarks>
        </member>
        <member name="M:PRISM.clsPathUtils.FitsMask(System.String,System.String)">
            <summary>
            Check a filename against a filemask (like * or *.txt or MSGF*)
            </summary>
            <param name="fileName"></param>
            <param name="fileMask"></param>
            <returns>True if a match, otherwise false</returns>
            <remarks>From "http://stackoverflow.com/questions/725341/how-to-determine-if-a-file-matches-a-file-mask/19655824#19655824"</remarks>
        </member>
        <member name="M:PRISM.clsPathUtils.GetParentDirectoryPath(System.String,System.String@)">
            <summary>
            Return the parent directory of directoryPath
            Supports both Windows paths and Linux paths
            </summary>
            <param name="directoryPath">Directory path to examine</param>
            <param name="directoryName">Name of the directory in directoryPath but without the parent path</param>
            <returns>Parent directory path, or an empty string if no parent</returns>
            <remarks>Returns \ or / if the path is rooted and the parent is a path</remarks>
        </member>
        <member name="M:PRISM.clsPathUtils.PossiblyQuotePath(System.String)">
            <summary>
            Examines strPath to look for spaces
            </summary>
            <param name="filePath"></param>
            <returns>filePath as-is if no spaces, otherwise filePath surrounded by double quotes </returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsPathUtils.ReplaceFilenameInPath(System.String,System.String)">
            <summary>
            Replace the filename in the path with a new filename
            </summary>
            <param name="existingFilePath"></param>
            <param name="newFileName"></param>
            <returns></returns>
        </member>
        <member name="P:PRISM.clsProcessorCoreInfo.ProcessorID">
            <summary>
            Processor ID for this core
            </summary>
        </member>
        <member name="P:PRISM.clsProcessorCoreInfo.PhysicalID">
            <summary>
            Physical ID of the core
            </summary>
        </member>
        <member name="P:PRISM.clsProcessorCoreInfo.CoreID">
            <summary>
            Core ID of the core
            </summary>
        </member>
        <member name="M:PRISM.clsProcessorCoreInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="processorID"></param>
        </member>
        <member name="T:PRISM.clsProgRunner">
            <summary>
            This class runs a single program as an external process and monitors it with an internal thread
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.DEFAULT_MONITOR_INTERVAL_MSEC">
            <summary>
            Default monitoring interval, in milliseconds
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.MINIMUM_MONITOR_INTERVAL_MSEC">
            <summary>
            Minimum monitoring interval, in milliseconds
            </summary>
        </member>
        <member name="T:PRISM.clsProgRunner.States">
            <summary>
            clsProgRunner states
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.States.NotMonitoring">
            <summary>
            Not Monitoring
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.States.Monitoring">
            <summary>
            Monitoring
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.States.Waiting">
            <summary>
            Waiting
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.States.CleaningUp">
            <summary>
            Cleaning up
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.States.Initializing">
            <summary>
            Initializing
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.States.StartingProcess">
            <summary>
            Starting the process
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.mLogger">
            <summary>
            Log class
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.mExceptionLogger">
            <summary>
            Interface used for logging exceptions
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.mEventLogger">
            <summary>
            Interface used for logging errors and health related messages
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_Process">
            <summary>
            Used to start and monitor the external program
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_CancellationToken">
            <summary>
            Thread cancellation token
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_doCleanup">
            <summary>
            Flag that tells internal thread to quit monitoring external program and exit
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_monitorInterval">
            <summary>
            The interval, in milliseconds, for monitoring the thread to wake up and check m_doCleanup
            </summary>
            <remarks>Default is 5000 msec</remarks>
        </member>
        <member name="F:PRISM.clsProgRunner.m_ExitCode">
            <summary>
            Exit code returned by completed process
            </summary>
            <remarks>Initially set to -123454321</remarks>
        </member>
        <member name="F:PRISM.clsProgRunner.m_CachedConsoleOutput">
            <summary>
            Caches the text written to the Console by the external program
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_CachedConsoleError">
            <summary>
            Caches the text written to the Error buffer by the external program
            </summary>
        </member>
        <member name="E:PRISM.clsProgRunner.ProgChanged">
            <summary>
            This event is raised at regular intervals while monitoring the program
            </summary>
            <remarks>Raised every m_monitorInterval milliseconds</remarks>
        </member>
        <member name="T:PRISM.clsProgRunner.ProgChangedEventHandler">
            <summary>
            Progress changed event delegate
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:PRISM.clsProgRunner.ConsoleOutputEvent">
            <summary>
            This event is raised when new text is written to the console
            </summary>
        </member>
        <member name="T:PRISM.clsProgRunner.ConsoleOutputEventEventHandler">
            <summary>
            Console output event delegate
            </summary>
            <param name="message"></param>
            <remarks></remarks>
        </member>
        <member name="E:PRISM.clsProgRunner.ConsoleErrorEvent">
            <summary>
            This event is raised when the external program writes text to the console's error stream
            </summary>
        </member>
        <member name="T:PRISM.clsProgRunner.ConsoleErrorEventEventHandler">
            <summary>
            Console error event delegate
            </summary>
            <param name="message"></param>
            <remarks></remarks>
        </member>
        <member name="P:PRISM.clsProgRunner.Arguments">
            <summary>
            Arguments supplied to external program when it is run
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.CachedConsoleOutput">
            <summary>
            Text written to the Console by the external program (including carriage returns)
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.CachedConsoleError">
            <summary>
            Any text written to the Error buffer by the external program
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.CacheStandardOutput">
            <summary>
            When true then will cache the text the external program writes to the console
            Can retrieve using the CachedConsoleOutput readonly property
            Will also fire event ConsoleOutputEvent as new text is written to the console
            </summary>
            <remarks>If this is true, then no window will be shown, even if CreateNoWindow=False</remarks>
        </member>
        <member name="P:PRISM.clsProgRunner.ConsoleOutputFileIncludesCommandLine">
            <summary>
            When true, the program name and command line arguments will be added to the top of the console output file
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.ConsoleOutputFilePath">
            <summary>
            File path to which the console output will be written if WriteConsoleOutputToFile is true
            If blank, then file path will be auto-defined in the WorkDir  when program execution starts
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.CreateNoWindow">
            <summary>
            Determine if window should be displayed
            Will be forced to True if CacheStandardOutput = True
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.EchoOutputToConsole">
            <summary>
            When true, then echoes, in real time, text written to the Console by the external program
            Ignored if CreateNoWindow = False
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.ExitCode">
            <summary>
            Exit code when process completes
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.MonitoringInterval">
            <summary>
            How often (milliseconds) internal monitoring thread checks status of external program
            </summary>
            <remarks>Minimum allowed value is 100 milliseconds</remarks>
        </member>
        <member name="P:PRISM.clsProgRunner.Name">
            <summary>
            Name of this progrunner
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.NotifyOnEvent">
            <summary>
            When true, raises event ProgChanged
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.NotifyOnException">
            <summary>
            When true, and if mLogger or mExceptionLogger is defined, re-throws the exception
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.PID">
            <summary>
            Process id of the currently running external program's process
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.Program">
            <summary>
            External program that prog runner will run
            This is the full path to the program file
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.Repeat">
            <summary>
            Whether prog runner will restart external program after it exits
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.RepeatHoldOffTime">
            <summary>
            Time (in seconds) that prog runner waits to restart the external program after it exits
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.State">
            <summary>
            Current state of prog runner (as number)
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.StateName">
            <summary>
            Current state of prog runner (as descriptive name)
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.WindowStyle">
            <summary>
            Window style to use when CreateNoWindow is False
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.WorkDir">
            <summary>
            Working directory for process execution
            Not necessarily the same as the directory that contains the program we're running
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.WriteConsoleOutputToFile">
            <summary>
            When true then will write the standard output to a file in real-time
            Will also fire event ConsoleOutputEvent as new text is written to the console
            Define the path to the file using property ConsoleOutputFilePath; if not defined, the file will be created in the WorkDir
            </summary>
            <remarks>If this is true, then no window will be shown, even if CreateNoWindow=False</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.ClearCachedConsoleOutput">
            <summary>
            Clears any console output text that is currently cached
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.ClearCachedConsoleError">
            <summary>
            Clears any console error text that is currently cached
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.ConsoleErrorHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Asynchronously handles the error stream from m_Process
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.ConsoleOutputHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Asynchronously handles the console output from m_Process
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.GarbageCollectNow">
            <summary>
            Force the garbage collector to run, waiting up to 1 second for it to finish
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.GarbageCollectNow(System.Int32)">
            <summary>
            Force the garbage collector to run
            </summary>
            <param name="maxWaitTimeMSec"></param>
        </member>
        <member name="M:PRISM.clsProgRunner.GetConsoleOutputFilePath">
            <summary>
            Returns the full path to the console output file that will be created if WriteConsoleOutputToFile is true
            </summary>
            <returns></returns>
            <remarks>Before calling this function, define WorkDir (working directory folder) and Program (full path to the .exe to run)</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.JoinThreadNow">
            <summary>
            Attempt to re-join the thread running the external process
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.RegisterEventLogger(PRISM.Logging.BaseLogger)">
            <summary>
            Associate a logger with this class
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.RegisterEventLogger(PRISM.ILogger)">
            <summary>
            Associate an event logger with this class
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.RegisterExceptionLogger(PRISM.ILogger)">
            <summary>
            Sets the name of the exception logger
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.SleepMilliseconds(System.Int32)">
            <summary>
            Pause program execution for the specific number of milliseconds
            </summary>
            <param name="sleepTimeMsec">Value between 10 and 10000 (i.e. between 10 msec and 10 seconds)</param>
        </member>
        <member name="M:PRISM.clsProgRunner.SleepMillisecondsAsync(System.Int32)">
            <summary>
            Pause program execution for the specific number of milliseconds
            </summary>
            <param name="sleepTimeMsec">Value between 10 and 10000 (i.e. between 10 msec and 10 seconds)</param>
        </member>
        <member name="M:PRISM.clsProgRunner.StartProcess(System.Object)">
            <summary>
            Start program as external process and monitor its state
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.StartAndMonitorProgram">
            <summary>
            Creates a new thread and starts code that runs and monitors a program in it
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.StartingOrMonitoring">
            <summary>
            Return True if the program is starting or running
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsProgRunner.StopMonitoringProgram(System.Boolean)">
            <summary>
            Causes monitoring thread to exit on its next monitoring cycle
            </summary>
        </member>
        <member name="T:PRISM.clsStackTraceFormatter">
            <summary>
            This class produces an easier-to read stack trace for an exception
            See the descriptions for functions GetExceptionStackTrace and
            GetExceptionStackTraceMultiLine for example text
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PRISM.clsStackTraceFormatter.STACK_TRACE_TITLE">
            <summary>
            Stack trace label string
            </summary>
        </member>
        <member name="F:PRISM.clsStackTraceFormatter.STACK_CHAIN_SEPARATOR">
            <summary>
            String interpolated between parts of the stack trace
            </summary>
        </member>
        <member name="F:PRISM.clsStackTraceFormatter.FINAL_FILE_PREFIX">
            <summary>
            Prefix added before the final file is listed in the stacktrace
            </summary>
        </member>
        <member name="M:PRISM.clsStackTraceFormatter.GetExceptionStackTrace(System.Exception,System.Boolean)">
            <summary>
            Parses the StackTrace text of the given exception to return a compact description of the current stack
            </summary>
            <param name="ex">Exception</param>
            <param name="includeInnerExceptionMessages">When true, also append details of any inner exceptions</param>
            <returns>
            String of the form:
            "Stack trace: clsCodeTest.Test-:-clsCodeTest.TestException-:-clsCodeTest.InnerTestException in clsCodeTest.vb:line 86"
            </returns>
            <remarks>Useful for removing the full file paths included in the default stack trace</remarks>
        </member>
        <member name="M:PRISM.clsStackTraceFormatter.GetExceptionStackTraceMultiLine(System.Exception,System.Boolean)">
            <summary>
            Parses the StackTrace text of the given exception to return a cleaned up description of the current stack,
            with one line for each function in the call tree
            </summary>
            <param name="ex">Exception</param>
            <param name="includeInnerExceptionMessages">When true, also append details of any inner exceptions</param>
            <returns>
            Stack trace:
              clsCodeTest.Test
              clsCodeTest.TestException
              clsCodeTest.InnerTestException
               in clsCodeTest.vb:line 86
            </returns>
            <remarks>Useful for removing the full file paths included in the default stack trace</remarks>
        </member>
        <member name="M:PRISM.clsStackTraceFormatter.GetExceptionStackTraceData(System.Exception)">
            <summary>
            Parses the StackTrace text of the given exception to return a cleaned up description of the current stack
            </summary>
            <param name="ex">Exception</param>
            <returns>
            List of function names; for example:
              clsCodeTest.Test
              clsCodeTest.TestException
              clsCodeTest.InnerTestException
               in clsCodeTest.vb:line 86
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsStackTraceFormatter.GetExceptionStackTraceData(System.String)">
            <summary>
            Parses the given StackTrace text to return a cleaned up description of the current stack
            </summary>
            <param name="stackTraceText">Exception.StackTrace data</param>
            <returns>
            List of function names; for example:
              clsCodeTest.Test
              clsCodeTest.TestException
              clsCodeTest.InnerTestException
               in clsCodeTest.vb:line 86
            </returns>
            <remarks></remarks>
        </member>
        <member name="T:PRISM.clsWindowsUpdateStatus">
            <summary>
            Utility functions for checking whether Windows updates are likely to be applied close to the current time
            Windows desktop computers have Windows updates applied around 3 am on the first Thursday after the third Tuesday of the month
            Windows servers have Windows updates applied around 3 am or 10 am on the first Sunday after the second Tuesday of the month
            </summary>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.UpdatesArePending">
            <summary>
            Checks whether Windows Updates are expected to occur close to the current time of day
            </summary>
            <returns>True if Windows updates are likely pending on this computer or the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.UpdatesArePending(System.String@)">
            <summary>
            Checks whether Windows Updates are expected to occur close to the current time of day
            </summary>
            <param name="pendingWindowsUpdateMessage">Output: description of the pending or recent Windows updates</param>
            <returns>True if Windows updates are likely pending on this computer or the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.UpdatesArePending(System.DateTime,System.String@)">
            <summary>
            Checks whether Windows Updates are expected to occur close to currentTime
            </summary>
            <param name="currentTime">Current time of day</param>
            <param name="pendingWindowsUpdateMessage">Output: description of the pending or recent Windows updates</param>
            <returns>True if Windows updates are likely pending on this computer or the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.ServerUpdatesArePending">
            <summary>
            Checks whether Windows Updates are expected to occur on Windows Server machines close to the current time of day
            </summary>
            <returns>True if Windows updates are likely pending on the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.ServerUpdatesArePending(System.DateTime,System.String@)">
            <summary>
            Checks whether Windows Updates are expected to occur on Windows Server machines close currentTime
            </summary>
            <param name="currentTime">Current time of day</param>
            <param name="pendingWindowsUpdateMessage">Output: description of the pending or recent Windows updates</param>
            <returns>True if Windows updates are likely pending on the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.GetNthTuesdayInMonth(System.DateTime,System.Int32)">
            <summary>
            Return the first, second, third, fourth, or fifth Tuesday in the month
            </summary>
            <param name="currentTime"></param>
            <param name="occurrence">1 for the first Tuesday, 2 for the second, etc.</param>
            <returns></returns>
        </member>
        <member name="T:PRISM.CommandLineParser`1">
             <summary>
             Basic class for keeping parameters flags and properties for command line arguments tied together,
             supporting properties of primitive types (and arrays of primitive types).
            
             Supports parameter flags similar to /d -dd --dir, with case sensitivity when needed,
             with the separator between parameter flag and parameter as ' ' or ':',
             and also supports using a parameter flag as a switch (if the associated property is a bool).
            
             If an argument is supplied multiple times, it only keeps the last one supplied.
             If the property is an array, multiple values are provided using '-paramName value -paramName value ...' or similar.
             Includes support for showing help with no args supplied, or with argument names of "?" and "help" (can be overridden).
             </summary>
             <remarks>
             Either call static method ParseArgs like this:
               var options = new ValidatorOptions();
               var asmName = typeof(Program).GetTypeInfo().Assembly.GetName();
               if (!CommandLineParser&lt;ValidatorOptions&gt;.ParseArgs(args, options, asmName.Name, version) || !options.ValidateArgs()) { return false; }
            
             Or instantiate this class, which allows for suppressing the auto-display of the syntax if an argument error is encountered
               var parser = new CommandLineParser(asmName.Name, version);
               parser.Options = options;
               parser.ParseArgs(args);
            
             Note that args comes from the entry method, static int Main(string[] args)
            
             An example class suitable for use when instantiating the CommandLineParser is GenericParserOptions in this project
             </remarks>
             <typeparam name="T"></typeparam>
        </member>
        <member name="T:PRISM.CommandLineParser`1.ParserResults">
            <summary>
            Results from the parsing
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ParserResults.Success">
            <summary>
            Parsing status - false if parsing failed
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ParserResults.ParseErrors">
            <summary>
            Errors that occurred during parsing
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ParserResults.ParsedResults">
            <summary>
            Target object, populated with the parsed arguments when the parsing completes
            </summary>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParserResults.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="parsed"></param>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParserResults.Failed">
            <summary>
            Set the parsing status to failed
            </summary>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParserResults.OutputErrors">
            <summary>
            Print the parsing errors to console
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ContactInfo">
            <summary>
            Developer contact info
            </summary>
            <remarks>If defined, shown at the end of PrintHelp</remarks>
        </member>
        <member name="P:PRISM.CommandLineParser`1.EntryAssemblyName">
            <summary>
            Entry assembly name
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ExeVersionInfo">
            <summary>
            Executable version info
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ParamFlagCharacters">
            <summary>
            Get or set the characters allowed at the beginning of an argument specifier
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ParamSeparatorCharacters">
            <summary>
            Get or set the characters allowed as separators between an argument specifier and argument value
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ProgramInfo">
            <summary>
            Description of the program's purpose / usage
            </summary>
            <remarks>If defined, shown at the start of PrintHelp (though after any error messages)</remarks>
        </member>
        <member name="P:PRISM.CommandLineParser`1.Results">
            <summary>
            Parsing results. Contains success value, target object, and error list
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.UsageExamples">
            <summary>
            Usage examples to display to the user at the end of the help text
            </summary>
        </member>
        <member name="M:PRISM.CommandLineParser`1.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="entryAsmName">Name of the executing assembly</param>
            <param name="versionInfo">Executable version info</param>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParseArgs(System.String[],`0,System.String)">
            <summary>
            Parse the arguments into <paramref name="options"/>, returning a bool. Entry assembly name is retrieved via reflection.
            </summary>
            <param name="args"></param>
            <param name="options"></param>
            <param name="versionInfo">Executable version info</param>
            <returns>True on success, false if argument parse failed</returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParseArgs(System.String[],`0,System.String,System.String)">
            <summary>
            Parse the arguments into <paramref name="options"/>, returning a bool.
            </summary>
            <param name="args"></param>
            <param name="options"></param>
            <param name="entryAssemblyName">Name of the executable</param>
            <param name="versionInfo">Executable version info</param>
            <returns>True on success, false if argument parse failed</returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParseArgs(System.String[],System.String)">
            <summary>
            Parse the arguments, returning the parsing results in <see cref="T:PRISM.CommandLineParser`1.ParserResults"/>. Entry assembly name is retrieved via reflection.
            </summary>
            <param name="args"></param>
            <param name="versionInfo">Executable version info</param>
            <returns></returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParseArgs(System.String[],System.String,System.String)">
            <summary>
            Parse the arguments, returning the parsing results in <see cref="T:PRISM.CommandLineParser`1.ParserResults"/>.
            </summary>
            <param name="args"></param>
            <param name="entryAssemblyName">Name of the executable</param>
            <param name="versionInfo">Executable version info</param>
            <returns></returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParseArgs(System.String[],System.Boolean,System.Boolean)">
            <summary>
            Parse the arguments, returning the parsing results
            </summary>
            <param name="args"></param>
            <param name="onErrorOutputHelp">When an error occurs, display the error and output the help</param>
            <param name="outputErrors">When an error occurs, output the error</param>
            <returns></returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ParseValueToType(System.Type,PRISM.OptionAttribute,System.String,System.String)">
            <summary>
            Parses a value to the specified type, checking min and max limits
            </summary>
            <param name="propertyType"></param>
            <param name="parseData"></param>
            <param name="argKey"></param>
            <param name="valueToParse"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ConvertToType(System.Object,System.Type)">
            <summary>
            Parse most objects normally, but parse enums using Enum.Parse
            </summary>
            <param name="valueToConvert"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ArgsPreprocess(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Parse the arguments to a dictionary
            </summary>
            <param name="args"></param>
            <returns>Dictionary where keys are argument names and values are the setting for the argument</returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.GetPositionalArgName(System.Int32)">
            <summary>
            Generate the special argument name used to track positional arguments
            </summary>
            <param name="argPosition"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ShowHelp(System.String,System.String)">
            <summary>
            Display the help contents, using the information supplied by the Option attributes and the default constructor for the templated type
            </summary>
            <param name="entryAssemblyName">Name of the executable</param>
            <param name="versionInfo">Executable version info</param>
        </member>
        <member name="M:PRISM.CommandLineParser`1.PrintHelp">
            <summary>
            Display the help contents, using the information supplied by the Option attributes and the default constructor for the templated type
            </summary>
        </member>
        <member name="M:PRISM.CommandLineParser`1.UpdatePropertyHelpText(System.String,System.String)">
            <summary>
            Update the HelpText for a property at runtime
            </summary>
            <param name="propertyName">Property to update (case-sensitive)</param>
            <param name="helpText">New help text</param>
        </member>
        <member name="M:PRISM.CommandLineParser`1.UpdatePropertyHelpText(System.String,System.String,System.String)">
            <summary>
            Change the HelpText for a property at runtime, searching for textToFind and replacing with replacementText
            </summary>
            <param name="propertyName">Property to update (case-sensitive)</param>
            <param name="textToFind">Text to find</param>
            <param name="replacementText">Text to use for a replacement</param>
        </member>
        <member name="M:PRISM.CommandLineParser`1.CreateHelpContents">
            <summary>
            Create the help text and argument name list for each argument
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.CommandLineParser`1.WrapParagraph(System.String,System.Int32)">
            <summary>
            Wraps the words in textToWrap to the set width (where possible)
            </summary>
            <param name="textToWrap">Text to wrap</param>
            <param name="wrapWidth">Max length per line</param>
            <returns>Wrapped paragraph</returns>
            <remarks>Use the 'alert' character ('\a') to create a non-breaking space</remarks>
        </member>
        <member name="M:PRISM.CommandLineParser`1.WrapParagraphAsList(System.String,System.Int32)">
            <summary>
            Wraps the words in textToWrap to the set width (where possible)
            </summary>
            <param name="textToWrap">Text to wrap</param>
            <param name="wrapWidth">Max length per line</param>
            <returns>Wrapped paragraph as a list of strings</returns>
            <remarks>Use the 'alert' character ('\a') to create a non-breaking space</remarks>
        </member>
        <member name="M:PRISM.CommandLineParser`1.GetValidArgs">
            <summary>
            Get the arguments that are valid for the class, dealing with argument name collision and invalid characters as needed
            </summary>
            <returns>Dictionary where key is argument name, and value is Argument Info</returns>
            <remarks>Position arguments are tracked via special flags: ##1##, ##2##, etc.</remarks>
        </member>
        <member name="T:PRISM.CommandLineParser`1.ArgInfo">
            <summary>
            Data about a single spelling of an argument name (name and NAME will be in the same instance)
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ArgInfo.ArgNormalCase">
            <summary>
            The first listed argument name
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ArgInfo.AllArgNormalCase">
            <summary>
            All arguments with the same name that differ only in capitalization
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ArgInfo.CaseSensitive">
            <summary>
            If the name is case sensitive
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ArgInfo.CanBeSwitch">
            <summary>
            If one of the arguments with this spelling is a bool
            </summary>
        </member>
        <member name="P:PRISM.CommandLineParser`1.ArgInfo.IsBuiltInArg">
            <summary>
            If the argument key is internally defined
            </summary>
        </member>
        <member name="M:PRISM.CommandLineParser`1.ArgInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PRISM.CommandLineParser`1.GetPropertiesAttributes">
            <summary>
            Parse the properties of the templated class
            </summary>
            <returns>PropertyInfo and the OptionAttribute instance for each property that has the attribute</returns>
        </member>
        <member name="T:PRISM.OptionAttribute">
            <summary>
            Attribute class to flag properties that are command line arguments
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.HelpText">
            <summary>
            Text displayed on the help screen
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.Required">
            <summary>
            True if the argument is required
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.ParamKeys">
            <summary>
            Valid command line argument name (or names)
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.ArgPosition">
            <summary>
            Maps a given unnamed argument to this parameter
            Defaults to 0 meaning not mapped to any unnamed arguments
            </summary>
            <remarks>
            For example, in MyUtility.exe InputFilePath.txt OutputFilePath.txt
            InputFilePath.txt is at position 1 and
            OutputFilePath.txt is at position 2
            </remarks>
        </member>
        <member name="P:PRISM.OptionAttribute.HelpShowsDefault">
            <summary>
            If the help screen should show the default value for an argument (value pulled from the default constructor); Defaults to true.
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.DefaultValueFormatString">
            <summary>
            Format string for adding default values to end of help text. If this is not set, and <see cref="P:PRISM.OptionAttribute.HelpShowsDefault"/>
            is true, the default will be displayed as " (Default: [value][, min (if set)][, max (if set)])".
            Use "{0}" for default value, "{1}" for min, and "{2}" for max. Use '\a' for a non-breaking space.
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.Min">
            <summary>
            Minimum value, for a numeric argument
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.Max">
            <summary>
            Maximum value, for a numeric argument
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.DoNotListEnumValues">
            <summary>
            If the property is an enum, enum values are listed by default. Set this to 'true' to not list the enum values.
            </summary>
        </member>
        <member name="P:PRISM.OptionAttribute.Hidden">
            <summary>
            Set to 'true' to hide the argument from the help out
            </summary>
            <remarks>This is useful for supporting obsolete arguments</remarks>
        </member>
        <member name="M:PRISM.OptionAttribute.#ctor(System.String[])">
            <summary>
            Constructor supporting any number of param keys.
            </summary>
            <param name="paramKeys">Must supply at least one key for the argument, and it must be distinct within the class</param>
            <remarks>Not CLS compliant</remarks>
        </member>
        <member name="M:PRISM.OptionAttribute.#ctor(System.String)">
            <summary>
            Constructor, taking a single paramKey or a multiple param keys separated by a '|'
            </summary>
            <param name="paramKey">Must supply at least one key for the argument, and it must be distinct within the class; multiple keys can be specified, separated by a '|'</param>
            <remarks>CLS compliant</remarks>
        </member>
        <member name="M:PRISM.OptionAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor supporting up to 4 param keys
            </summary>
            <param name="paramKey1"></param>
            <param name="paramKey2"></param>
            <param name="paramKey3"></param>
            <param name="paramKey4"></param>
            <remarks>CLS compliant</remarks>
        </member>
        <member name="M:PRISM.OptionAttribute.ToString">
            <summary>
            ToString overload (show the first supported argument name)
            </summary>
            <returns></returns>
        </member>
        <member name="T:PRISM.EnumExtensions">
            <summary>
            Some extension methods for working with enums
            </summary>
        </member>
        <member name="M:PRISM.EnumExtensions.GetDescriptionAttribute(System.Enum,System.Type)">
            <summary>
            Get the string from the DescriptionAttribute of an enum value
            </summary>
            <remarks>From https://stackoverflow.com/questions/1799370/getting-attributes-of-enums-value</remarks>
        </member>
        <member name="T:PRISM.ConsoleMsgUtils">
            <summary>
            This class includes methods to be used when displaying messages at the console while monitoring a class that inherits clsEventNotifier
            </summary>
        </member>
        <member name="P:PRISM.ConsoleMsgUtils.DebugFontColor">
            <summary>
            Debug message font color
            </summary>
        </member>
        <member name="P:PRISM.ConsoleMsgUtils.ErrorFontColor">
            <summary>
            Error message font color
            </summary>
        </member>
        <member name="P:PRISM.ConsoleMsgUtils.StackTraceFontColor">
            <summary>
            Stack trace font color
            </summary>
        </member>
        <member name="P:PRISM.ConsoleMsgUtils.WarningFontColor">
            <summary>
            Warning message font color
            </summary>
        </member>
        <member name="M:PRISM.ConsoleMsgUtils.ShowError(System.String,System.Boolean,System.Boolean)">
            <summary>
            Display an error message at the console with color ErrorFontColor (defaults to Red)
            If an exception is included, the stack trace is shown using StackTraceFontColor
            </summary>
            <param name="message">Error message</param>
            <param name="includeSeparator">When true, add a separator line before and after the error</param>
            <param name="writeToErrorStream">When true, also send the error to the the standard error stream</param>
            <returns>Error message, with the exception message appended, provided ex is not null and provided message does not end with ex.message</returns>
        </member>
        <member name="M:PRISM.ConsoleMsgUtils.ShowError(System.String,System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Display an error message at the console with color ErrorFontColor (defaults to Red)
            If an exception is included, the stack trace is shown using StackTraceFontColor
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception (can be null)</param>
            <param name="includeSeparator">When true, add a separator line before and after the error</param>
            <param name="writeToErrorStream">When true, also send the error to the the standard error stream</param>
            <returns>Error message, with the exception message appended, provided ex is not null and provided message does not end with ex.message</returns>
        </member>
        <member name="M:PRISM.ConsoleMsgUtils.ShowErrors(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
            Display a set of error messages at the console with color ErrorFontColor (defaults to Red)
            </summary>
            <param name="title">Title text to be shown before the errors; can be null or blank</param>
            <param name="errorMessages">Error messages to show</param>
            <param name="writeToErrorStream">When true, also send the error to the the standard error stream</param>
            <param name="indentChars">Characters to add before each error message; defaults to 3 spaces</param>
            <returns>The first error message</returns>
        </member>
        <member name="M:PRISM.ConsoleMsgUtils.ShowDebug(System.String,System.String)">
            <summary>
            Display a debug message at the console with color DebugFontColor (defaults to DarkGray)
            </summary>
            <param name="message"></param>
            <param name="indentChars">Characters to use to indent the message</param>
        </member>
        <member name="M:PRISM.ConsoleMsgUtils.ShowWarning(System.String)">
            <summary>
            Display a warning message at the console with color WarningFontColor (defaults to Yellow)
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PRISM.ConsoleMsgUtils.WriteToErrorStream(System.String)">
            <summary>
            Write a message to the error stream
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="T:PRISM.DirectoryScanner">
            <summary>
            Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.
            </summary>
        </member>
        <member name="E:PRISM.DirectoryScanner.FoundFile">
            <summary>
            A file was found when scanning the directory
            </summary>
        </member>
        <member name="T:PRISM.DirectoryScanner.FoundFileEventHandler">
            <summary>
            Event is raised whenever a matching file is found.
            </summary>
            <remarks>This event is most useful for implementing a progress indicator.</remarks>
            <param name="fileName">The found file's full path.</param>
        </member>
        <member name="M:PRISM.DirectoryScanner.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor: Initializes a new instance of the DirectoryScanner class.
            </summary>
            <param name="dirs">An array of directory paths to scan.</param>
        </member>
        <member name="M:PRISM.DirectoryScanner.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructor: Initializes a new instance of the DirectoryScanner class.
            </summary>
            <param name="dirs">A list of directory paths to scan</param>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.DirectoryScanner.PerformScan(System.Collections.ArrayList@,System.String[])">
            <summary>
            Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.
            </summary>
            <param name="results">An array of file paths found; unchanged if no matches</param>
            <param name="searchPatterns">An array of regular expressions to use in the search.</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:PRISM.DirectoryScanner.PerformScan(System.String[])">
            <summary>
            Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.
            </summary>
            <param name="searchPatterns">An array of regular expressions to use in the search.</param>
            <returns>A list of the file paths found; empty list if no matches</returns>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFilesBase">
            <summary>
            This class can be used as a base class for classes that process a file or files, and create
            new output files in an output folder.  Note that this class contains simple error codes that
            can be set from any derived classes.  The derived classes can also set their own local error codes
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes">
            <summary>
            Error code enums
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes.NoError">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes.InvalidInputFilePath">
            <summary>
            Invalid input file path
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes.InvalidOutputFolderPath">
            <summary>
            Invalid output folder path
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes.ParameterFileNotFound">
            <summary>
            Parameter file not found
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes.InvalidParameterFile">
            <summary>
            Invalid parameter file
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes.FilePathError">
            <summary>
            File path error
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes.LocalizedError">
            <summary>
            Localized error
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes.UnspecifiedError">
            <summary>
            Unspecified error
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesBase.IgnoreErrorsWhenUsingWildcardMatching">
            <summary>
            This option applies when processing files matched with a wildcard
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesBase.ErrorCode">
            <summary>
            Error code reflecting processing outcome
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.CleanupPaths(System.String@,System.String@)">
            <summary>
            Cleanup file/folder paths
            </summary>
            <param name="inputFileOrFolderPath"></param>
            <param name="outputFolderPath"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.CleanupFilePaths(System.String@,System.String@)">
            <summary>
            Make sure inputFilePath points to a valid file and validate the output folder (defining it if null or empty)
            </summary>
            <param name="inputFilePath"></param>
            <param name="outputFolderPath"></param>
            <returns>True if success, false if an error</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.CleanupInputFilePath(System.String@)">
            <summary>
            Make sure inputFilePath points to a valid file
            </summary>
            <param name="inputFilePath"></param>
            <returns>True if success, false if an error</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.GetBaseClassErrorMessage">
            <summary>
            Get the base class error message, or an empty string if no error
            </summary>
            <returns>Error message</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.GetDefaultExtensionsToParse">
            <summary>
            Get the default file extensions to parse
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFilesWildcard(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Process one or more files
            </summary>
            <param name="inputFilePath">Match spec for finding files, can contain * and ?</param>
            <param name="outputFolderPath">Output folder path</param>
            <param name="parameterFilePath">Parameter file path</param>
            <param name="resetErrorCode">If True, reset ErrorCode</param>
            <returns> True if success, false if an error</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFile(System.String)">
            <summary>
            Process a single file
            </summary>
            <param name="inputFilePath">Input file path</param>
            <returns>True if success, otherwise false</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFile(System.String,System.String)">
            <summary>
            Process a single file
            </summary>
            <param name="inputFilePath">Input file path</param>
            <param name="outputFolderPath">Output folderpath</param>
            <returns>True if success, otherwise false</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFile(System.String,System.String,System.String)">
            <summary>
            Process a single file
            </summary>
            <param name="inputFilePath">Input file path</param>
            <param name="outputFolderPath">Output folderpath</param>
            <param name="parameterFilePath">Parameter file path</param>
            <returns>True if success, otherwise false</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Process a single file
            </summary>
            <param name="inputFilePath">Input file path</param>
            <param name="outputFolderPath">Output folderpath</param>
            <param name="parameterFilePath">Parameter file path</param>
            <param name="resetErrorCode">If true, reset the error code</param>
            <returns>True if success, otherwise false</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFilesAndRecurseFolders(System.String,System.String,System.String)">
            <summary>
            Process files in a folder and in subfolders
            </summary>
            <param name="inputFilePathOrFolder"></param>
            <param name="outputFolderName"></param>
            <param name="parameterFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFilesAndRecurseFolders(System.String,System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Process files in a folder and in subfolders
            </summary>
            <param name="inputFilePathOrFolder"></param>
            <param name="outputFolderName"></param>
            <param name="parameterFilePath"></param>
            <param name="extensionsToParse"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFilesAndRecurseFolders(System.String,System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Process files in a folder and in subfolders
            </summary>
            <param name="inputFilePathOrFolder"></param>
            <param name="outputFolderName"></param>
            <param name="outputFolderAlternatePath"></param>
            <param name="recreateFolderHierarchyInAlternatePath"></param>
            <param name="parameterFilePath"></param>
            <param name="recurseFoldersMaxLevels"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.ProcessFilesAndRecurseFolders(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Process files in a folder and in subfolders
            </summary>
            <param name="inputFilePathOrFolder">
            Input file or folder (supports wildcards)
            If a folder path, or if empty, processes files with known entries in the working directory
            If a file path, will process matching files, ignoring the default extensions and ignoring extensionsToParse
            </param>
            <param name="outputFolderName"></param>
            <param name="outputFolderAlternatePath"></param>
            <param name="recreateFolderHierarchyInAlternatePath"></param>
            <param name="parameterFilePath"></param>
            <param name="recurseFoldersMaxLevels">Levels to recurse, 0 or negative to process all subdirectories</param>
            <param name="extensionsToParse"></param>
            <returns></returns>
            <remarks>
            The extensions should be of the form ".TXT" or ".RAW" (i.e. a period then the extension)
            If any of the extensions is "*" or ".*", all files will be processed
            </remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesBase.SetBaseClassErrorCode(PRISM.FileProcessor.ProcessFilesBase.eProcessFilesErrorCodes)">
            <summary>
            Update the base class error code
            </summary>
            <param name="eNewErrorCode"></param>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFilesOrFoldersBase">
            <summary>
            Base class for both ProcessFilesBase and ProcessFoldersBase
            </summary>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFilesOrFoldersBase.eMessageTypeConstants">
            <summary>
            Message type enums
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.eMessageTypeConstants.Normal">
            <summary>
            Normal message
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.eMessageTypeConstants.ErrorMsg">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.eMessageTypeConstants.Warning">
            <summary>
            Warning message
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.eMessageTypeConstants.Debug">
            <summary>
            Debugging message
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.eMessageTypeConstants.Suppress">
            <summary>
            Message that should not be output
            </summary>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogLevel">
            <summary>
            Log levels, specifying the severity of messages to be logged
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogLevel.Suppress">
            <summary>
            Output suppressed messages with everything else
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogLevel.Debug">
            <summary>
            All messages
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogLevel.Normal">
            <summary>
            All normal, warning, and error messages
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogLevel.Warning">
            <summary>
            Warning and error messages
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogLevel.Error">
            <summary>
            Error messages only
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mFileDate">
            <summary>
            File date (program date)
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mLogFileUsesDateStamp">
            <summary>
            True if the log file should include the current date
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mLogFilePath">
            <summary>
            Log file path
            </summary>
            <remarks>Leave blank to auto-define</remarks>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mLogFile">
            <summary>
            Log file writer
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mOutputFolderPath">
            <summary>
            Output folder path
            </summary>
            <remarks>This variable is updated when CleanupFilePaths() is called</remarks>
        </member>
        <member name="E:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ProgressReset">
            <summary>
            Progress was reset
            </summary>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ProgressResetEventHandler">
            <summary>
            Delegate to indicate that progress was reset
            </summary>
        </member>
        <member name="E:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ProgressComplete">
            <summary>
            Processing is complete
            </summary>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ProgressCompleteEventHandler">
            <summary>
            Delegate to indicate that processing is complete
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mProgressPercentComplete">
            <summary>
            Percent complete, value between 0 and 100, but can contain decimal percentage values
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mLogDataCache">
            <summary>
            Keys in this dictionary are the log type and message (separated by an underscore), values are the most recent time the string was logged
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.AbortProcessing">
            <summary>
            True if processing should be aborted
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.FileVersion">
            <summary>
            Version of the executing assembly
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.FileDate">
            <summary>
            File date (aka program date)
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogFilePath">
            <summary>
            Log file path
            </summary>
            <remarks>Leave blank to auto-define</remarks>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogFolderPath">
            <summary>
            Log folder path (ignored if LogFilePath is rooted)
            </summary>
            <remarks>
            If blank, mOutputFolderPath will be used; if mOutputFolderPath is also blank, the log is created in the same folder as the executing assembly
            </remarks>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogMessagesToFile">
            <summary>
            True to log messages to a file
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ProgressStepDescription">
            <summary>
            Description of the current task
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ProgressPercentComplete">
            <summary>
            Percent complete, value between 0 and 100, but can contain decimal percentage values
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ShowMessages">
            <summary>
            Deprecated property (previously, when true, events would be raised but when false, exceptions would be thrown)
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ReThrowEvents">
            <summary>
            When true, if an error occurs a message will be logged, then the event will be re-thrown
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LoggingLevel">
            <summary>
            Minimum severity of messages to log
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ProgressOutputLevel">
            <summary>
            The severity of progress output; normally only used to suppress progress output in logs by setting this to <see cref="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogLevel.Suppress"/>
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.AbortProcessingNow">
            <summary>
            Abort processing as soon as possible
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.CleanupPaths(System.String@,System.String@)">
            <summary>
            Cleanup paths
            </summary>
            <param name="inputFileOrFolderPath"></param>
            <param name="outputFolderPath"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.CloseLogFileNow">
            <summary>
            Close the log file
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.CreateSettingsFileIfMissing(System.String,System.String)">
            <summary>
            Verifies that the specified .XML settings file exists in the user's local settings folder
            </summary>
            <param name="applicationName">Application name</param>
            <param name="settingsFileName">Settings file name</param>
            <returns>True if the file already exists or was created, false if an error</returns>
            <remarks>Will return True if the master settings file does not exist</remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.CreateSettingsFileIfMissing(System.String)">
            <summary>
            Verifies that the specified .XML settings file exists in the user's local settings folder
            </summary>
            <param name="settingsFilePathLocal">Full path to the local settings file, for example C:\Users\username\AppData\Roaming\AppName\SettingsFileName.xml</param>
            <returns>True if the file already exists or was created, false if an error</returns>
            <remarks>Will return True if the master settings file does not exist</remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GarbageCollectNow">
            <summary>
            Perform garbage collection
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GarbageCollectNow(System.Int32)">
            <summary>
            Perform garbage collection
            </summary>
            <param name="maxWaitTimeMSec"></param>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GarbageCollectWaitForGC">
            <summary>
            Force the garbage collector to run, waiting up to 1 second for it to finish
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GetAppDataFolderPath(System.String)">
            <summary>
            Returns the full path to the folder into which this application should read/write settings file information
            </summary>
            <param name="appName"></param>
            <returns></returns>
            <remarks>For example, C:\Users\username\AppData\Roaming\AppName</remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GetAppFolderPath">
            <summary>
            Returns the full path to the folder that contains the currently executing .Exe or .Dll
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GetAppPath">
            <summary>
            Returns the full path to the executing .Exe or .Dll
            </summary>
            <returns>File path</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GetEntryOrExecutingAssembly">
            <summary>
            Returns the entry assembly, if it is unavailable, returns the executing assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GetAppVersion(System.String)">
            <summary>
            Returns the .NET assembly version followed by the program date
            </summary>
            <param name="programDate"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GetErrorMessage">
            <summary>
            Get the current error message
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GetVersionForExecutingAssembly">
            <summary>
            Gets the version for the entry assembly, if available
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.GetSettingsFilePathLocal(System.String,System.String)">
            <summary>
            Returns the full path to this application's local settings file
            </summary>
            <param name="applicationName"></param>
            <param name="settingsFileName"></param>
            <returns></returns>
            <remarks>For example, C:\Users\username\AppData\Roaming\AppName\SettingsFileName.xml</remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.HandleException(System.String,System.Exception)">
            <summary>
            Handle exceptions, rethrowing it if ReThrowEvents is true
            </summary>
            <param name="baseMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ConfigureLogFilePath">
            <summary>
            Sets the log file path (<see cref="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mLogFilePath"/>),
            according to data in <see cref="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mLogFilePath"/>,
            <see cref="F:PRISM.FileProcessor.ProcessFilesOrFoldersBase.mLogFileUsesDateStamp"/>, and <see cref="P:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogFolderPath"/>
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.LogMessage(System.String,PRISM.FileProcessor.ProcessFilesOrFoldersBase.eMessageTypeConstants,System.Int32)">
            <summary>
            Log a message then raise a Status, Warning, or Error event
            </summary>
            <param name="message"></param>
            <param name="eMessageType"></param>
            <param name="duplicateHoldoffHours"></param>
            <remarks>
            Note that CleanupPaths() will update mOutputFolderPath, which is used here if mLogFolderPath is blank
            Thus, be sure to call CleanupPaths (or update mLogFolderPath) before the first call to LogMessage
            </remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ResetProgress">
            <summary>
            Reset progress
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ResetProgress(System.String)">
            <summary>
            Reset progress, updating the current processing step
            </summary>
            <param name="progressStepDescription"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ShowErrorMessage(System.String,System.Int32)">
            <summary>
            Show an error message
            </summary>
            <param name="message"></param>
            <param name="duplicateHoldoffHours"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ShowErrorMessage(System.String,System.Boolean,System.Int32)">
            <summary>
            Show an error message
            </summary>
            <param name="message"></param>
            <param name="allowLogToFile"></param>
            <param name="duplicateHoldoffHours"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ShowMessage(System.String,System.Int32)">
            <summary>
            Show a status message
            </summary>
            <param name="message"></param>
            <param name="duplicateHoldoffHours"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ShowMessage(System.String,System.Boolean,System.Int32,PRISM.FileProcessor.ProcessFilesOrFoldersBase.eMessageTypeConstants)">
            <summary>
            Show a status message
            </summary>
            <param name="message"></param>
            <param name="allowLogToFile"></param>
            <param name="duplicateHoldoffHours"></param>
            <param name="eMessageType"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ShowWarning(System.String,System.Int32)">
            <summary>
            Show a warning
            </summary>
            <param name="message"></param>
            <param name="duplicateHoldoffHours"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.ShowWarning(System.String,System.Boolean)">
            <summary>
            Show a warning
            </summary>
            <param name="message"></param>
            <param name="allowLogToFile"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.UpdateProgress(System.String)">
            <summary>
            Update the current progress description
            </summary>
            <param name="progressStepDescription"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.UpdateProgress(System.Single)">
            <summary>
            Update progress percent complete
            </summary>
            <param name="percentComplete"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.UpdateProgress(System.String,System.Single)">
            <summary>
            Update progress description and percent complete
            </summary>
            <param name="progressStepDescription"></param>
            <param name="percentComplete"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFilesOrFoldersBase.OperationComplete">
            <summary>
            Raise event ProgressComplete
            </summary>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFoldersBase">
            <summary>
            This class can be used as a base class for classes that process a folder or folders
            Note that this class contains simple error codes that can be set from any derived classes.
            The derived classes can also set their own local error codes
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes">
            <summary>
            Error code enums
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes.NoError">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes.InvalidInputFolderPath">
            <summary>
            Invalid input folder path
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes.InvalidOutputFolderPath">
            <summary>
            Invalid output folder path
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes.ParameterFileNotFound">
            <summary>
            Parameter file not found
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes.InvalidParameterFile">
            <summary>
            Invalid parameter file
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes.FilePathError">
            <summary>
            File path error
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes.LocalizedError">
            <summary>
            Localized error
            </summary>
        </member>
        <member name="F:PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes.UnspecifiedError">
            <summary>
            Unspecified error
            </summary>
        </member>
        <member name="P:PRISM.FileProcessor.ProcessFoldersBase.ErrorCode">
            <summary>
            Error code reflecting processing outcome
            </summary>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.CleanupPaths(System.String@,System.String@)">
            <summary>
            Cleanup file/folder paths
            </summary>
            <param name="inputFileOrFolderPath"></param>
            <param name="outputFolderPath"></param>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.CleanupFolderPaths(System.String@,System.String@)">
            <summary>
            Make sure inputFolderPath points to a valid directory and validate the output folder (defining it if null or empty)
            </summary>
            <param name="inputFolderPath"></param>
            <param name="outputFolderPath"></param>
            <returns>True if success, false if an error</returns>
            <remarks>Create outputFolderPath if it does not exist</remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.GetBaseClassErrorMessage">
            <summary>
            Get the base class error message, or an empty string if no error
            </summary>
            <returns>Error message</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.ProcessFoldersWildcard(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Process one or more folders (aka directories)
            </summary>
            <param name="inputFolderPath">Match spec for finding folders, can contain * and ?</param>
            <param name="outputFolderAlternatePath">Alternate output folder path</param>
            <param name="parameterFilePath">Parameter file path</param>
            <param name="resetErrorCode">If True, reset ErrorCode</param>
            <returns> True if success, false if an error</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.ProcessFolder(System.String)">
            <summary>
            Process a single directory
            </summary>
            <param name="inputFolderPath">Input folder path</param>
            <returns>True if success, otherwise false</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.ProcessFolder(System.String,System.String,System.String)">
            <summary>
            Process a single directory
            </summary>
            <param name="inputFolderPath">Input folder path</param>
            <param name="outputFolderAlternatePath">Alternate output folder path</param>
            <param name="parameterFilePath">Parameter file path</param>
            <returns>True if success, otherwise false</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.ProcessFolder(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Process a single directory
            </summary>
            <param name="inputFolderPath">Input folder path</param>
            <param name="outputFolderAlternatePath">Alternate output folder path</param>
            <param name="parameterFilePath">Parameter file path</param>
            <param name="resetErrorCode">If true, reset the error code</param>
            <returns>True if success, otherwise false</returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.ProcessAndRecurseFolders(System.String,System.Int32)">
            <summary>
            Process directories and subdirectories
            </summary>
            <param name="inputFolderPath"></param>
            <param name="recurseFoldersMaxLevels"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.ProcessAndRecurseFolders(System.String,System.String,System.String,System.Int32)">
            <summary>
            Process directories and subdirectories
            </summary>
            <param name="inputFolderPath">Input folder path (supports wildcards)</param>
            <param name="outputFolderAlternatePath"></param>
            <param name="parameterFilePath"></param>
            <param name="recurseFoldersMaxLevels">If 0 or negative, recurse infinitely</param>
            <returns></returns>
            <remarks>Calls ProcessFolders for all matching folders in inputFolderPath</remarks>
        </member>
        <member name="M:PRISM.FileProcessor.ProcessFoldersBase.SetBaseClassErrorCode(PRISM.FileProcessor.ProcessFoldersBase.eProcessFoldersErrorCodes)">
            <summary>
            Update the base class error code
            </summary>
            <param name="eNewErrorCode"></param>
        </member>
        <member name="T:PRISM.clsFileTools">
             <summary>
             Tools to manipulate paths and directories.
             </summary>
             <remarks>
             There is a set of functions to properly terminate directory paths.
             There is a set of functions to copy an entire directory tree.
             There is a set of functions to copy an entire directory tree and resume copying interrupted files.
             There is a set of functions to get the size of an entire directory tree, including the number of files and directories.
            </remarks>
        </member>
        <member name="E:PRISM.clsFileTools.CopyingFile">
            <summary>
            File copy starting event
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.CopyingFileEventHandler">
            <summary>
            Event is raised before copying begins.
            </summary>
            <param name="filename">The file's full path.</param>
        </member>
        <member name="E:PRISM.clsFileTools.ResumingFileCopy">
            <summary>
            Event is raised before copying begins (when resuming a file copy)
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.ResumingFileCopyEventHandler">
            <summary>
            Event is raised before copying begins (when resuming a file copy)
            </summary>
            <param name="filename">The file's full path.</param>
        </member>
        <member name="E:PRISM.clsFileTools.FileCopyProgress">
            <summary>
            Event is raised before copying begins
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.FileCopyProgressEventHandler">
            <summary>
            Event is raised before copying begins
            </summary>
            <param name="filename">The file name (not full path)</param>
            <param name="percentComplete">Percent complete (value between 0 and 100)</param>
        </member>
        <member name="E:PRISM.clsFileTools.WaitingForLockQueue">
            <summary>
            Waiting for the lock queue
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.WaitingForLockQueueEventHandler">
            <summary>
            Waiting for the lock queue
            </summary>
            <param name="sourceFilePath">Source file path</param>
            <param name="targetFilePath">Target file path</param>
            <param name="backlogSourceMB">Source computer backlog, in MB</param>
            <param name="backlogTargetMB">Target computer backlog, in MB</param>
        </member>
        <member name="E:PRISM.clsFileTools.LockQueueTimedOut">
            <summary>
            Event is raised if we wait to long for our turn in the lock file queue
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.LockQueueTimedOutEventHandler">
            <summary>
            Event is raised if we wait to long for our turn in the lock file queue
            </summary>
            <param name="sourceFilePath"></param>
            <param name="targetFilePath"></param>
            <param name="waitTimeMinutes"></param>
        </member>
        <member name="E:PRISM.clsFileTools.LockQueueWaitComplete">
            <summary>
            Event is raised when we are done waiting waiting for our turn in the lock file queue
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.LockQueueWaitCompleteEventHandler">
            <summary>
            Event is raised when we are done waiting waiting for our turn in the lock file queue
            </summary>
            <param name="sourceFilePath"></param>
            <param name="targetFilePath"></param>
            <param name="waitTimeMinutes"></param>
        </member>
        <member name="F:PRISM.clsFileTools.LOCKFILE_MININUM_SOURCE_FILE_SIZE_MB">
            <summary>
            Minimum source file size (in MB) for the lock queue to be used
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.DATE_TIME_FORMAT">
            <summary>
            Standard date/time formatting
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.DEFAULT_CHUNK_SIZE_MB">
            <summary>
            Used by CopyFileWithResume and CopyDirectoryWithResume when copying a file byte-by-byte and supporting resuming the copy if interrupted
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PRISM.clsFileTools.DEFAULT_FLUSH_THRESHOLD_MB">
            <summary>
            Used by CopyFileWithResume; defines how often the data is flushed out to disk; must be larger than the ChunkSize
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PRISM.clsFileTools.FileOverwriteMode">
            <summary>
            File overwrite options
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.FileOverwriteMode.DoNotOverwrite">
            <summary>
            Do not overwrite
            </summary>
            <remarks>An exception will be thrown if you try to overwrite an existing file</remarks>
        </member>
        <member name="F:PRISM.clsFileTools.FileOverwriteMode.AlwaysOverwrite">
            <summary>
            Always overwrite
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.FileOverwriteMode.OverwriteIfSourceNewer">
            <summary>
            OverWrite if source date newer (or if same date but length differs)
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.FileOverwriteMode.OverWriteIfDateOrLengthDiffer">
            <summary>
            OverWrite if any difference in size or date; note that newer files in target folder will get overwritten since their date doesn't match
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.CopyStatus">
            <summary>
            Copy status
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.CopyStatus.Idle">
            <summary>
            Not copying a file
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.CopyStatus.NormalCopy">
            <summary>
            File is geing copied via .NET and cannot be resumed
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.CopyStatus.BufferedCopy">
            <summary>
            File is being copied in chunks and can be resumed
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.CopyStatus.BufferedCopyResume">
            <summary>
            Resuming copying a file in chunks
            </summary>
        </member>
        <member name="P:PRISM.clsFileTools.CopyChunkSizeMB">
            <summary>
            Copy chunk size, in MB
            </summary>
            <remarks>Used by CopyFileWithResume</remarks>
        </member>
        <member name="P:PRISM.clsFileTools.CopyFlushThresholdMB">
            <summary>
            Copy flush threshold, in MB
            Cached data is written to disk when this threshold is reached
            </summary>
            <remarks>Used by CopyFileWithResume</remarks>
        </member>
        <member name="P:PRISM.clsFileTools.CurrentCopyStatus">
            <summary>
            Current copy status
            </summary>
        </member>
        <member name="P:PRISM.clsFileTools.CurrentSourceFile">
            <summary>
            Current source file path
            </summary>
        </member>
        <member name="P:PRISM.clsFileTools.DebugLevel">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="P:PRISM.clsFileTools.ManagerName">
            <summary>
            Manager name (used when creating lock files)
            </summary>
        </member>
        <member name="M:PRISM.clsFileTools.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="managerName"></param>
            <param name="intDebugLevel"></param>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminator(System.String,System.Boolean,System.Char)">
            <summary>
            Modifies input directory path string depending on optional settings.
            </summary>
            <param name="folderPath">The input directory path.</param>
            <param name="addTerm">Specifies whether the directory path string ends with the specified directory separation character.</param>
            <param name="termChar">The specified directory separation character.</param>
            <returns>The modified directory path.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminator(System.String,System.Boolean)">
            <summary>
            Adds or removes the DOS path separation character from the end of the directory path.
            </summary>
            <param name="folderPath">The input directory path.</param>
            <param name="addTerm">Specifies whether the directory path string ends with the specified directory separation character.</param>
            <returns>The modified directory path.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminator(System.String,System.String)">
            <summary>
            Assures the directory path ends with the specified path separation character.
            </summary>
            <param name="folderPath">The input directory path.</param>
            <param name="termChar">The specified directory separation character.</param>
            <returns>The modified directory path.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminator(System.String)">
            <summary>
            Assures the directory path ends with the DOS path separation character.
            </summary>
            <param name="folderPath">The input directory path.</param>
            <returns>The modified directory path.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminatorEX(System.String,System.Boolean,System.Char)">
            <summary>
            Modifies input directory path string depending on addTerm
            </summary>
            <param name="folderPath">The input directory path.</param>
            <param name="addTerm">Specifies whether the directory path should end with the specified directory separation character</param>
            <param name="termChar">The specified directory separation character.</param>
            <returns>The modified directory path.</returns>
            <remarks>addTerm=True forces the path to end with specified termChar while addTerm=False will remove termChar from the end if present</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFile(System.String,System.String)">
            <summary>
            Copies a source file to the destination file. Does not allow overwriting.
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a source file to the destination file
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
            <param name="overWrite">True to overwrite</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a source file to the destination file
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
            <param name="overWrite">True to overwrite</param>
            <param name="backupDestFileBeforeCopy">True to backup the destination file before copying</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFile(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copies a source file to the destination file. Allows overwriting.
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
            <param name="overWrite">True if the destination file can be overwritten; otherwise, false.</param>
            <param name="backupDestFileBeforeCopy">True to backup the destination file before copying</param>
            <param name="versionCountToKeep">Number of backup copies to keep</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileEx(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copies a source file to the destination file. Allows overwriting.
            </summary>
            <remarks>
            This function is unique in that it allows you to specify a destination path where
            some of the directories do not already exist.  It will create them if they don't.
            The last parameter specifies whether a file already present in the
            destination directory will be overwritten
            - Note: requires Imports System.IO
            - Usage: CopyFile("C:\Misc\Bob.txt", "D:\MiscBackup\Bob.txt")
            </remarks>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
            <param name="overWrite">True if the destination file can be overwritten; otherwise, false.</param>
            <param name="backupDestFileBeforeCopy">True to backup the destination file before copying</param>
            <param name="versionCountToKeep">Number of backup copies to keep</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.String,System.String,System.Boolean)">
            <summary>
            Copy the source file to the target path; do not overWrite existing files
            </summary>
            <param name="sourceFilePath">Source file path</param>
            <param name="targetFilePath">Target file path</param>
            <param name="overWrite">True to overWrite existing files</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copy the source file to the target path
            </summary>
            <param name="sourceFilePath">Source file path</param>
            <param name="targetFilePath">Target file path</param>
            <param name="managerName">Manager name (included in the lock file name)</param>
            <param name="overWrite">True to overWrite existing files</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists yet overWrite is false, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Copy the source file to the target path
            </summary>
            <param name="fiSource">Source file object</param>
            <param name="targetFilePath">Target file path</param>
            <param name="overWrite">True to overWrite existing files</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists yet overWrite is false, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.IO.FileInfo,System.String,System.String,System.Boolean)">
            <summary>
            Copy the source file to the target path
            </summary>
            <param name="fiSource">Source file object</param>
            <param name="targetFilePath">Target file path</param>
            <param name="managerName">Manager name (included in the lock file name)</param>
            <param name="overWrite">True to overWrite existing files</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists yet overWrite is false, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GetLockFolder(System.IO.FileInfo)">
            <summary>
            Given a file path, return the lock file folder if it exsists
            </summary>
            <param name="fiFile"></param>
            <returns>Lock folder path if it exists</returns>
            <remarks>Lock folders are only returned for remote shares (shares that start with \\)</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GetLockFolderPath(System.IO.FileInfo)">
            <summary>
            Given a file path, return the lock file folder path (does not verify that it exists)
            </summary>
            <param name="fiFile"></param>
            <returns>Lock folder path</returns>
            <remarks>Lock folders are only returned for remote shares (shares that start with \\)</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.String,System.String,System.IO.FileInfo,System.String,System.String,System.Boolean)">
            <summary>
            Copy the source file to the target path
            </summary>
            <param name="lockFolderPathSource">Path to the lock folder for the source file; can be an empty string</param>
            <param name="lockFolderPathTarget">Path to the lock folder for the target file; can be an empty string</param>
            <param name="fiSource">Source file object</param>
            <param name="targetFilePath">Target file path</param>
            <param name="managerName">Manager name (included in the lock file name)</param>
            <param name="overWrite">True to overWrite existing files</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists yet overWrite is false, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CreateLockFile(System.IO.DirectoryInfo,System.Int64,System.IO.FileInfo,System.String,System.String)">
            <summary>
            Create a lock file in the specified lock folder
            </summary>
            <param name="diLockFolder"></param>
            <param name="lockFileTimestamp"></param>
            <param name="fiSource"></param>
            <param name="targetFilePath"></param>
            <param name="managerName"></param>
            <returns>Full path to the lock file; empty string if an error or if diLockFolder is null</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteDirectory(System.String)">
            <summary>
             Deletes the specified directory and all subdirectories
            </summary>
            <param name="directoryPath"></param>
            <returns>True if success, false if an error</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and all subdirectories
            </summary>
            <param name="directoryPath"></param>
            <param name="ignoreErrors"></param>
            <returns>True if success, false if an error</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteDirectoryFiles(System.String)">
            <summary>
            Deletes the specified directory and all subdirectories; does not delete the target folder
            </summary>
            <param name="directoryPath"></param>
            <returns>True if success, false if an error</returns>
            <remarks>Deletes each file individually.  Deletion errors are reported but are not treated as a fatal error</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteDirectoryFiles(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and all subdirectories
            </summary>
            <param name="directoryPath"></param>
            <param name="deleteFolderIfEmpty">Set to True to delete the folder, if it is empty</param>
            <returns>True if success, false if an error</returns>
            <remarks>Deletes each file individually.  Deletion errors are reported but are not treated as a fatal error</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteFileIgnoreErrors(System.String)">
            <summary>
            Delete the specified file
            </summary>
            <param name="filePath"></param>
            <returns>True if successfully deleted (or if the file doesn't exist); false if an error</returns>
            <remarks>If the initial attempt fails, then checks the readonly bit and tries again.  If not readonly, then performs a garbage collection (every 500 msec)</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.FindLockFiles(System.IO.DirectoryInfo,System.Int64)">
            <summary>
            Finds lock files with a timestamp less than
            </summary>
            <param name="diLockFolder"></param>
            <param name="lockFileTimestamp"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GenerateLockFileName(System.Int64,System.IO.FileInfo,System.String)">
            <summary>
            Generate the lock file name, which starts with a msec-based timestamp, then has the source file size (in MB), then has information on the machine creating the file
            </summary>
            <param name="lockFileTimestamp"></param>
            <param name="fiSource"></param>
            <param name="managerName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GetLockFileTimeStamp">
            <summary>
            Get the time stamp to be used when naming a lock file
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsFileTools.GetServerShareBase(System.String)">
            <summary>
            Returns the first portion of a network share path, for example \\MyServer is returned for \\MyServer\Share\Filename.txt
            </summary>
            <param name="serverSharePath"></param>
            <returns></returns>
            <remarks>Treats \\picfs as a special share since DMS-related files are at \\picfs\projects\DMS</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String)">
            <summary>
            Copies a source directory to the destination directory. Does not allow overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.String)">
            <summary>
            Copies a source directory to the destination directory. Does not allow overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="managerName"></param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a source directory to the destination directory. Does not allow overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="managerName"></param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
            <param name="fileNamesToSkip">
            List of file names to skip when copying the directory (and subdirectories);
            can optionally contain full path names to skip</param>
            <param name="managerName"></param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryEx(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyCollection{System.String},System.String)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <remarks>Usage: CopyDirectory("C:\Misc", "D:\MiscBackup")
            Original code obtained from vb2themax.com
            </remarks>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="setAttribute">true if the read-only attribute of the destination file is to be modified, false otherwise.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
            <param name="fileNamesToSkip">
            List of file names to skip when copying the directory (and subdirectories);
            can optionally contain full path names to skip</param>
            <param name="managerName">Name of the calling program; used when calling CopyFileUsingLocks</param>
        </member>
        <member name="M:PRISM.clsFileTools.UpdateReadonlyAttribute(System.IO.FileSystemInfo,System.String,System.Boolean)">
            <summary>
            Copies the file attributes from a source file to a target file, explicitly updating the read-only bit based on readOnly
            </summary>
            <param name="fiSourceFile">Source FileInfo</param>
            <param name="targetFilePath">Target file path</param>
            <param name="readOnly">True to force the ReadOnly bit on, False to force it off</param>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String)">
            <summary>
            Copies a source directory to the destination directory.
            Overwrites existing files if they differ in modification time or size.
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean)">
            <summary>
            Copies a source directory to the destination directory.
            Overwrites existing files if they differ in modification time or size.
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.clsFileTools.FileOverwriteMode,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a source directory to the destination directory.
            overWrite behavior is governed by fileOverwriteMode
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <param name="fileOverwriteMode">Behavior when a file already exists at the destination</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.clsFileTools.FileOverwriteMode,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Copies a source directory to the destination directory.
            overWrite behavior is governed by fileOverwriteMode
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <param name="fileOverwriteMode">Behavior when a file already exists at the destination</param>
            <param name="fileCountSkipped">Number of files skipped (output)</param>
            <param name="fileCountResumed">Number of files resumed (output)</param>
            <param name="fileCountNewlyCopied">Number of files newly copied (output)</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.clsFileTools.FileOverwriteMode,System.Collections.Generic.List{System.String},System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Copies a source directory to the destination directory.
            overWrite behavior is governed by fileOverwriteMode
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <param name="fileOverwriteMode">Behavior when a file already exists at the destination</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
            <param name="fileCountSkipped">Number of files skipped (output)</param>
            <param name="fileCountResumed">Number of files resumed (output)</param>
            <param name="fileCountNewlyCopied">Number of files newly copied (output)</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.clsFileTools.FileOverwriteMode,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Copies a source directory to the destination directory.
            overWrite behavior is governed by fileOverwriteMode
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <param name="fileOverwriteMode">Behavior when a file already exists at the destination</param>
            <param name="setAttribute">True if the read-only attribute of the destination file is to be modified, false otherwise.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
            <param name="fileCountSkipped">Number of files skipped (output)</param>
            <param name="fileCountResumed">Number of files resumed (output)</param>
            <param name="fileCountNewlyCopied">Number of files newly copied (output)</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileWithResume(System.String,System.String,System.Boolean@)">
            <summary>
            Copy a file using chunks, thus allowing for resuming
            </summary>
            <param name="sourceFilePath"></param>
            <param name="targetFilePath"></param>
            <param name="copyResumed"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileWithResume(System.IO.FileInfo,System.String,System.Boolean@)">
            <summary>
            Copy fiSourceFile to diTargetFolder
            Copies the file using chunks, thus allowing for resuming
            </summary>
            <param name="fiSourceFile"></param>
            <param name="targetFilePath"></param>
            <param name="copyResumed">Output parameter; true if copying was resumed</param>
            <returns>True if success; false if an error</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.NearlyEqualFileTimes(System.DateTime,System.DateTime)">
            <summary>
            Compares two timestamps (typically the LastWriteTime for a file)
            If they agree within 2 seconds, returns True, otherwise false
            </summary>
            <param name="dtTime1">First file time</param>
            <param name="dtTime2">Second file time</param>
            <returns>True if the times agree within 2 seconds</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GetDirectorySize(System.String)">
            <summary>
            Get the directory size.
            </summary>
            <param name="folderPath">The path to the directory.</param>
            <returns>The directory size.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.GetDirectorySize(System.String,System.Int64@,System.Int64@)">
            <summary>
            Get the directory size, file count, and directory count for the entire directory tree.
            </summary>
            <param name="folderPath">The path to the directory.</param>
            <param name="fileCount">The number of files in the entire directory tree.</param>
            <param name="subFolderCount">The number of directories in the entire directory tree.</param>
            <returns>The directory size.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.GetDirectorySizeEX(System.String,System.Int64@,System.Int64@)">
            <summary>
            Get the directory size, file count, and directory count for the entire directory tree.
            </summary>
            <param name="folderPath">The path to the directory.</param>
            <param name="fileCount">The number of files in the entire directory tree.</param>
            <param name="subFolderCount">The number of directories in the entire directory tree.</param>
            <returns>The directory size.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.MoveDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Move a directory
            </summary>
            <param name="sourceFolderPath"></param>
            <param name="targetFolderPath"></param>
            <param name="overwriteFiles"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsFileTools.MoveDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Move a directory
            </summary>
            <param name="sourceFolderPath"></param>
            <param name="targetFolderPath"></param>
            <param name="overwriteFiles"></param>
            <param name="managerName"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsFileTools.BackupFileBeforeCopy(System.String)">
            <summary>
            Renames targetFilePath to have _Old1 before the file extension
            Also looks for and renames other backed up versions of the file (those with _Old2, _Old3, etc.)
            Use this function to backup old versions of a file before copying a new version to a target folder
            Keeps up to 9 old versions of a file
            </summary>
            <param name="targetFilePath">Full path to the file to backup</param>
            <returns>True if the file was successfully renamed (also returns True if the target file does not exist)</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.BackupFileBeforeCopy(System.String,System.Int32)">
            <summary>
            Renames targetFilePath to have _Old1 before the file extension
            Also looks for and renames other backed up versions of the file (those with _Old2, _Old3, etc.)
            Use this function to backup old versions of a file before copying a new version to a target folder
            </summary>
            <param name="targetFilePath">Full path to the file to backup</param>
            <param name="versionCountToKeep">Maximum backup copies of the file to keep</param>
            <returns>True if the file was successfully renamed (also returns True if the target file does not exist)</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.BytesToHumanReadable(System.Int64)">
            <summary>
            Convert a size, bytes, to a string representation
            For example, 165342 will return 161.5 KB
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsFileTools.CompactPathString(System.String,System.Int32)">
            <summary>
            Shorten pathToCompact to a maximum length of maxLength
            Examples:
            C:\...\B..\Finance..
            C:\...\W..\Business\Finances.doc
            C:\My Docum..\Word\Business\Finances.doc
            </summary>
            <param name="pathToCompact"></param>
            <param name="maxLength">Maximum length of the shortened path</param>
            <returns>Shortened path</returns>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteFileWithRetry(System.IO.FileInfo,System.String@)">
            <summary>
            Delete the file, retrying up to 3 times
            </summary>
            <param name="fiFile">File to delete</param>
            <param name="errorMessage">Output message: error message if unable to delete the file</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteFileWithRetry(System.IO.FileInfo,System.Int32,System.String@)">
            <summary>
            Delete the file, retrying up to retryCount times
            </summary>
            <param name="fiFile">File to delete</param>
            <param name="retryCount">Maximum number of times to retry the deletion, waiting 500 msec, then 750 msec between deletion attempts</param>
            <param name="errorMessage">Output message: error message if unable to delete the file</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.IsVimSwapFile(System.String)">
            <summary>
            Returns true if the file is _.swp or starts with a . and ends with .swp
            </summary>
            <param name="filePath"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.ValidateFreeDiskSpace(System.String,System.Double,System.Int64,System.String@)">
            <summary>
            Confirms that the drive for the target output file has a minimum amount of free disk space
            </summary>
            <param name="outputFilePath">Path to output file; defines the drive or server share for which we will determine the disk space</param>
            <param name="minimumFreeSpaceMB">
            Minimum free disk space, in MB.
            Will default to 150 MB if zero or negative.
            Takes into account outputFileExpectedSizeMB</param>
            <param name="currentDiskFreeSpaceBytes">
            Amount of free space on the given disk
            Determine on Windows using clsDiskInfo.GetDiskFreeSpace in PRISMWin.dll
            </param>
            <param name="errorMessage">Output message if there is not enough free space (or if the path is invalid)</param>
            <returns>True if more than minimumFreeSpaceMB is available; otherwise false</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.ValidateFreeDiskSpace(System.String,System.Double,System.Double,System.Int64,System.String@)">
            <summary>
            Confirms that the drive for the target output file has a minimum amount of free disk space
            </summary>
            <param name="outputFilePath">Path to output file; defines the drive or server share for which we will determine the disk space</param>
            <param name="outputFileExpectedSizeMB">Expected size of the output file</param>
            <param name="minimumFreeSpaceMB">
            Minimum free disk space, in MB.
            Will default to 150 MB if zero or negative.
            Takes into account outputFileExpectedSizeMB</param>
            <param name="currentDiskFreeSpaceBytes">
            Amount of free space on the given disk
            Determine on Windows using clsDiskInfo.GetDiskFreeSpace in PRISMWin.dll
            </param>
            <param name="errorMessage">Output message if there is not enough free space (or if the path is invalid)</param>
            <returns>True if more than minimumFreeSpaceMB is available; otherwise false</returns>
            <remarks>If currentDiskFreeSpaceBytes is negative, this function always returns true (provided the target directory exists)</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.WaitForLockFileQueue(System.Int64,System.IO.DirectoryInfo,System.IO.FileInfo,System.Int32)">
            <summary>
            Wait for the lock file queue to drop below a threshold
            </summary>
            <param name="lockFileTimestamp"></param>
            <param name="diLockFolderSource"></param>
            <param name="fiSourceFile"></param>
            <param name="maxWaitTimeMinutes"></param>
        </member>
        <member name="M:PRISM.clsFileTools.WaitForLockFileQueue(System.Int64,System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.IO.FileInfo,System.String,System.Int32)">
            <summary>
            Wait for the lock file queue to drop below a threshold
            </summary>
            <param name="lockFileTimestamp"></param>
            <param name="diLockFolderSource"></param>
            <param name="diLockFolderTarget"></param>
            <param name="fiSourceFile"></param>
            <param name="targetFilePath"></param>
            <param name="maxWaitTimeMinutes"></param>
        </member>
        <member name="T:PRISM.GenericParserOptions">
            <summary>
            This class demonstrates how to decorate properties in a class so that the CommandLineParser can use them to match command line arguments
            </summary>
        </member>
        <member name="T:PRISM.ISystemInfo">
            <summary>
            Interface for OS-specific classes for accessing Hardware Information
            </summary>
        </member>
        <member name="M:PRISM.ISystemInfo.GetCoreCount">
            <summary>
            Report the number of cores on this system
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>
            Should not be affected by hyperthreading, so a computer with two 8-core chips will report 16 cores, even if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.ISystemInfo.GetLogicalCoreCount">
            <summary>
            Report the number of logical cores on this system
            </summary>
            <returns>The number of logical cores on this computer</returns>
            <remarks>
            Will be affected by hyperthreading, so a computer with two 8-core chips will report 32 cores if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.ISystemInfo.GetProcessorPackageCount">
            <summary>
            Report the number of processor packages on this system
            </summary>
            <returns>The number of processor packages on this computer</returns>
        </member>
        <member name="M:PRISM.ISystemInfo.GetNumaNodeCount">
            <summary>
            Report the number of NUMA Nodes on this system
            </summary>
            <returns>The number of NUMA Nodes on this computer</returns>
        </member>
        <member name="M:PRISM.ISystemInfo.GetFreeMemoryMB">
            <summary>
            Determine the free system memory, in MB
            </summary>
            <returns>Free memory, or -1 if an error</returns>
        </member>
        <member name="M:PRISM.ISystemInfo.GetTotalMemoryMB">
            <summary>
            Determine the total system memory, in MB
            </summary>
            <returns>Total memory, or -1 if an error</returns>
        </member>
        <member name="T:PRISM.logMsgType">
            <summary>
            The type of log message.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logNormal">
            <summary>
            The message is informational.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logError">
            <summary>
            The message represents an error.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logWarning">
            <summary>
            The message represents a warning.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logDebug">
            <summary>
            The message is only for debugging purposes.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logNA">
            <summary>
            The mesaage does not apply (to what?).
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logHealth">
            <summary>
            The message is an indicator of (in)correct operation.
            </summary>
        </member>
        <member name="T:PRISM.ILogger">
            <summary>
            Defines the logging interface.
            </summary>
        </member>
        <member name="P:PRISM.ILogger.CurrentLogFilePath">
            <summary>
            Current log file path
            </summary>
        </member>
        <member name="P:PRISM.ILogger.MostRecentLogMessage">
            <summary>
            Most recent log message
            </summary>
        </member>
        <member name="P:PRISM.ILogger.MostRecentErrorMessage">
            <summary>
            Most recent error
            </summary>
        </member>
        <member name="M:PRISM.ILogger.PostEntries(System.Collections.Generic.List{PRISM.clsLogEntry})">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="messages">The messages to post.</param>
        </member>
        <member name="M:PRISM.ILogger.PostEntry(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="entryType">The ILogger error type.</param>
            <param name="localOnly">If true, only post the message to the local log file, not the database; only used by clsDBLogger</param>
        </member>
        <member name="M:PRISM.ILogger.PostError(System.String,System.Exception,System.Boolean)">
            <summary>
            Posts an error to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="e">The exception associated with the error.</param>
            <param name="localOnly">
            Only used by clsDBLogger
            When true, only post the message to the local log file
            When false, log to the local log file and the database
            </param>
        </member>
        <member name="T:PRISM.ILoggerAware">
            <summary>
            Defines the logging aware interface.
            </summary>
            <remarks>
            This interface is used by any class that wants to optionally support
            logging to a logger that implements the ILogger interface.  The key
            here is the phrase optionally.  The class allows, but does not
            require the class user to supply an ILogger.  If the Logger is not
            specified, the class throws Exceptions and raises Events in the usual
            way.  If an ILogger is specified, the user has the option of just logging,
            or logging and throwing/raising Exceptions/Events in the usual way as well.
            </remarks>
        </member>
        <member name="M:PRISM.ILoggerAware.RegisterExceptionLogger(PRISM.ILogger)">
            <summary>
            Register an ILogger with a class to have it log any exception that might occur.
            </summary>
            <param name="logger">A logger object to be used when logging is desired.</param>
        </member>
        <member name="M:PRISM.ILoggerAware.RegisterEventLogger(PRISM.ILogger)">
            <summary>
            Register an ILogger with a class to have it log any event that might occur.
            </summary>
            <param name="logger">A logger object to be used when logging is desired.</param>
        </member>
        <member name="P:PRISM.ILoggerAware.NotifyOnEvent">
            <summary>
            Set true and the class will raise events.  Set false and it will not.
            </summary>
            <remarks>A function like the one shown below can be placed in ILoggerAware class that will only raise the event in the
            event of one needing to be raised.
            </remarks>
        </member>
        <member name="P:PRISM.ILoggerAware.NotifyOnException">
            <summary>
            Set true and the class will throw exceptions.  Set false and it will not
            </summary>
            <remarks>A function like this can be place in ILoggerAware class that will only throw an exception in the
            event of one needing to be thrown.
            </remarks>
        </member>
        <member name="T:PRISM.Utilities">
            <summary>
            Utility functions
            </summary>
        </member>
        <member name="M:PRISM.Utilities.GetExceptionStackTrace(System.Exception)">
            <summary>
            Parses the StackTrace text of the given exception to return a compact description of the current stack
            </summary>
            <param name="objException"></param>
            <returns>
            String of the form:
            "Stack trace: clsCodeTest.Test-:-clsCodeTest.TestException-:-clsCodeTest.InnerTestException in clsCodeTest.vb:line 86"
            </returns>
            <remarks>Useful for removing the full file paths included in the default stack trace</remarks>
        </member>
        <member name="M:PRISM.Utilities.GetExceptionStackTraceMultiLine(System.Exception)">
            <summary>
            Parses the StackTrace text of the given exception to return a cleaned up description of the current stack,
            with one line for each function in the call tree
            </summary>
            <param name="ex">Exception</param>
            <returns>
            Stack trace:
              clsCodeTest.Test
              clsCodeTest.TestException
              clsCodeTest.InnerTestException
               in clsCodeTest.vb:line 86
            </returns>
            <remarks>Useful for removing the full file paths included in the default stack trace</remarks>
        </member>
        <member name="T:PRISM.clsFileLogger">
            <summary>
            Provides logging to a local file.
            </summary>
            <remarks>
            The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".
            </remarks>
        </member>
        <member name="F:PRISM.clsFileLogger.FILENAME_DATESTAMP">
            <summary>
            Default filename timestamp format string
            </summary>
        </member>
        <member name="F:PRISM.clsFileLogger.m_programName">
            <summary>
            Program name
            </summary>
            <remarks>Auto-determined using Assembly.GetEntryAssembly</remarks>
        </member>
        <member name="F:PRISM.clsFileLogger.m_programVersion">
            <summary>
            Program version
            </summary>
            <remarks>Auto-determined using Assembly.GetEntryAssembly</remarks>
        </member>
        <member name="M:PRISM.clsFileLogger.#ctor">
            <summary>
            Initializes a new instance of the clsFileLogger class.
            </summary>
            <remarks>This constructor (without a file path) is required because clsDBLogger inherits clsFileLogger</remarks>
        </member>
        <member name="M:PRISM.clsFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the clsFileLogger class which logs to the specified file.
            </summary>
            <param name="logFileBaseName">The name of the file to use for the log (either a filename like UpdateManager, or a relative path, like Logs\UpdateManager</param>
            <remarks>
            The actual log file name changes daily and is of the form "FilePath_mm-dd-yyyy.txt"
            logFileBaseName is allowed to be blank (e.g. if using clsDBLogger and there is no need for a local log file)
            </remarks>
        </member>
        <member name="P:PRISM.clsFileLogger.ArchiveOldLogFiles">
            <summary>
            When true, auto-archive old log files daily
            </summary>
        </member>
        <member name="P:PRISM.clsFileLogger.CurrentLogFilePath">
            <summary>
            Path to the current log file (readonly)
            </summary>
        </member>
        <member name="P:PRISM.clsFileLogger.ExecutableVersion">
            <summary>
            Gets the product version associated with this application.
            </summary>
        </member>
        <member name="P:PRISM.clsFileLogger.ExecutableName">
            <summary>
            Gets the name of the executable file that started the application.
            </summary>
        </member>
        <member name="P:PRISM.clsFileLogger.LogFileBaseName">
            <summary>
            The base name of the the log file, e.g. UpdateManager or Logs\UpdateManager
            </summary>
            <remarks>
            The actual log file name changes daily and is of the form "FilePath_mm-dd-yyyy.txt"
            This property is readonly; define when instantiating the logger using the constructor
            </remarks>
        </member>
        <member name="P:PRISM.clsFileLogger.LogFilePath">
            <summary>
            The base name of the the log file, e.g. UpdateManager or Logs\UpdateManager
            </summary>
            <remarks>The actual log file name changes daily and is of the form "FilePath_mm-dd-yyyy.txt"</remarks>
        </member>
        <member name="P:PRISM.clsFileLogger.MostRecentLogMessage">
            <summary>
            Most recent log message
            </summary>
        </member>
        <member name="P:PRISM.clsFileLogger.MostRecentErrorMessage">
            <summary>
            Most recent error message
            </summary>
        </member>
        <member name="M:PRISM.clsFileLogger.ArchiveOldLogs">
            <summary>
            Move log files more than 32 days old into a year-based folder
            </summary>
        </member>
        <member name="M:PRISM.clsFileLogger.LogToFile(System.Collections.Generic.IEnumerable{PRISM.clsLogEntry})">
            <summary>
            Writes a message to the log file.
            </summary>
            <param name="messages">List of messages to post.</param>
        </member>
        <member name="M:PRISM.clsFileLogger.PostEntries(System.Collections.Generic.List{PRISM.clsLogEntry})">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="messages">The messages to post.</param>
        </member>
        <member name="M:PRISM.clsFileLogger.PostEntry(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="entryType">The ILogger error type.</param>
            <param name="localOnly">
            Only used by clsDBLogger
            When true, only post the message to the local log file
            When false, log to the local log file and the database
            </param>
        </member>
        <member name="M:PRISM.clsFileLogger.PostError(System.String,System.Exception,System.Boolean)">
            <summary>
            Posts an error to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="ex">The exception associated with the error.</param>
            <param name="localOnly">
            Only used by clsDBLogger
            When true, only post the message to the local log file
            When false, log to the local log file and the database
            </param>
        </member>
        <member name="M:PRISM.clsFileLogger.TypeToString(PRISM.logMsgType)">
            <summary>
            Converts enumerated error type to string for logging output.
            </summary>
            <param name="MyErrType">The ILogger error type.</param>
        </member>
        <member name="T:PRISM.clsDBLogger">
            <summary>
            Provides logging to a database and local file.
            </summary>
            <remarks>The module name identifies the logging process; if not defined, will use MachineName:UserName</remarks>
        </member>
        <member name="F:PRISM.clsDBLogger.m_error_list">
            <summary>
            List of database errors
            </summary>
        </member>
        <member name="F:PRISM.clsDBLogger.m_moduleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="M:PRISM.clsDBLogger.#ctor">
            <summary>
            Initializes a new instance of the clsDBLogger class.
            </summary>
        </member>
        <member name="M:PRISM.clsDBLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the clsDBLogger class which logs to the specified database
            </summary>
            <param name="connectionStr">The connection string used to access the database.</param>
            <remarks>Only logs to a local file if a file name is defined using LogFilePath</remarks>
        </member>
        <member name="M:PRISM.clsDBLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the clsDBLogger class which logs to the specified database and file.
            </summary>
            <param name="connectionStr">The connection string used to access the database.</param>
            <param name="filePath">The name of the file to use for the log.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the clsDBLogger class which logs to the specified database and file.
            </summary>
            <param name="modName">The string used to identify the posting process.</param>
            <param name="connectionStr">The connection string used to access the database.</param>
            <param name="filePath">The name of the file to use for the log.</param>
            <remarks>The module name identifies the logging process; if not defined, will use MachineName:UserName</remarks>
        </member>
        <member name="P:PRISM.clsDBLogger.ConnectionString">
            <summary>
            The connection string used to access the database.
            </summary>
        </member>
        <member name="P:PRISM.clsDBLogger.DBErrors">
            <summary>
            List of any database errors that occurred while posting the log entry to the database
            </summary>
        </member>
        <member name="P:PRISM.clsDBLogger.MachineName">
            <summary>
            The module name identifies the logging process.
            </summary>
        </member>
        <member name="M:PRISM.clsDBLogger.ConstructModuleName">
            <summary>
            Construct the string MachineName:UserName.
            </summary>
        </member>
        <member name="P:PRISM.clsDBLogger.ModuleName">
            <summary>
            The module name identifies the logging process.
            </summary>
            <remarks>If the module name is not specified, it is filled in as
            MachineName:UserName.</remarks>
        </member>
        <member name="M:PRISM.clsDBLogger.LogToDB(System.String,PRISM.logMsgType)">
            <summary>
            Writes a message to the log table.
            </summary>
            <param name="message">The message to post.</param>
            <param name="entryType">The ILogger error type.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.PostEntries(System.Collections.Generic.List{PRISM.clsLogEntry})">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="messages">The messages to post.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.PostEntry(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="entryType">The ILogger error type.</param>
            <param name="localOnly">
            When true, only post the message to the local log file
            When false, log to the local log file and the database
            </param>
        </member>
        <member name="M:PRISM.clsDBLogger.PostError(System.String,System.Exception,System.Boolean)">
            <summary>
            Posts an error to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="ex">The exception associated with the error.</param>
            <param name="localOnly">
            When true, only post the message to the local log file
            When false, log to the local log file and the database
            </param>
        </member>
        <member name="M:PRISM.clsDBLogger.PostLogEntry(System.String,System.String)">
            <summary>
            Writes a message to the log table via the stored procedure.
            </summary>
            <param name="type">The ILogger error type.</param>
            <param name="message">The message to post.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Event handler for InfoMessage event.
            </summary>
            <remarks>Errors and warnings sent from the SQL Server database engine are caught here.</remarks>
        </member>
        <member name="T:PRISM.clsLogEntry">
            <summary>
            A class to hold a log entry
            </summary>
        </member>
        <member name="F:PRISM.clsLogEntry.Message">
            <summary>
            Log message
            </summary>
        </member>
        <member name="F:PRISM.clsLogEntry.EntryType">
            <summary>
            Log message type
            </summary>
        </member>
        <member name="F:PRISM.clsLogEntry.LocalOnly">
            <summary>
            Only used by clsDBLogger
            When true, log to the local file but not to the database
            When false, log to the local log file and the database
            </summary>
        </member>
        <member name="M:PRISM.clsLogEntry.#ctor(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="message">Log message</param>
            <param name="entryType">Message type</param>
            <param name="localOnly">
            Only used by clsDBLogger
            When true, only post the message to the local log file
            When false, log to the local log file and the database
            </param>
        </member>
        <member name="T:PRISM.clsQueLogger">
            <summary>
            Wraps a queuing mechanism around any object that implements ILogger interface.
            </summary>
            <remarks>The posting member functions of this class put the log entry
            onto the end of an internal queue and return very quickly to the caller.
            A separate thread within the class is used to perform the actual output of
            the log entries using the logging object that is specified
            in the constructor for this class.
            </remarks>
        </member>
        <member name="F:PRISM.clsQueLogger.m_queue">
            <summary>
            queue to hold entries to be output
            </summary>
        </member>
        <member name="F:PRISM.clsQueLogger.m_ThreadTimer">
            <summary>
            Internal thread for outputting entries from queue
            </summary>
        </member>
        <member name="F:PRISM.clsQueLogger.m_logger">
            <summary>
            logger object to use for outputting entries from queue
            </summary>
        </member>
        <member name="P:PRISM.clsQueLogger.CurrentLogFilePath">
            <summary>
            Path to the current log file
            </summary>
        </member>
        <member name="P:PRISM.clsQueLogger.MostRecentLogMessage">
            <summary>
            Most recent log message
            </summary>
        </member>
        <member name="P:PRISM.clsQueLogger.MostRecentErrorMessage">
            <summary>
            Most recent error message
            </summary>
        </member>
        <member name="M:PRISM.clsQueLogger.#ctor(PRISM.ILogger)">
            <summary>
            Constructor: Initializes a new instance of the clsQueLogger class which logs to the ILogger.
            </summary>
            <param name="logger">The target logger object.</param>
        </member>
        <member name="M:PRISM.clsQueLogger.LogFromQueue(System.Object)">
            <summary>
            Pull all entries from the queue and output them to the log streams.
            </summary>
        </member>
        <member name="M:PRISM.clsQueLogger.PostEntries(System.Collections.Generic.List{PRISM.clsLogEntry})">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="messages">The messages to post.</param>
        </member>
        <member name="M:PRISM.clsQueLogger.PostEntry(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Writes a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="entryType">The ILogger error type.</param>
            <param name="localOnly">
            Only used by clsDBLogger
            When true, only post the message to the local log file
            When false, log to the local log file and the database
            </param>
        </member>
        <member name="M:PRISM.clsQueLogger.PostError(System.String,System.Exception,System.Boolean)">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="e">The exception associated with the error.</param>
            <param name="localOnly">
            Only used by clsDBLogger
            When true, only post the message to the local log file
            When false, log to the local log file and the database
            </param>
        </member>
        <member name="T:PRISM.Logging.BaseLogger">
            <summary>
            Base class for FileLogger and DatabaseLogger
            </summary>
        </member>
        <member name="T:PRISM.Logging.BaseLogger.LogLevels">
            <summary>
            Log levels
            </summary>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.LogLevels.DEBUG">
            <summary>
            Debug message
            </summary>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.LogLevels.INFO">
            <summary>
            Informational message
            </summary>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.LogLevels.WARN">
            <summary>
            Warning message
            </summary>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.LogLevels.ERROR">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.LogLevels.FATAL">
            <summary>
            Fatal error message
            </summary>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.LogLevels.NOLOGGING">
            <summary>
            Disables all logging
            </summary>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.mLocalLogFileAccessError">
            <summary>
            Set to True if we cannot log to the official log file, we try to log to the local log file, and even that file cannot be written
            </summary>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.m_programName">
            <summary>
            Program name
            </summary>
            <remarks>Auto-determined using Assembly.GetEntryAssembly</remarks>
        </member>
        <member name="F:PRISM.Logging.BaseLogger.m_programVersion">
            <summary>
            Program version
            </summary>
            <remarks>Auto-determined using Assembly.GetEntryAssembly</remarks>
        </member>
        <member name="P:PRISM.Logging.BaseLogger.ExecutableVersion">
            <summary>
            Gets the product version associated with this application
            </summary>
        </member>
        <member name="P:PRISM.Logging.BaseLogger.ExecutableName">
            <summary>
            Gets the name of the executable file that started the application
            </summary>
        </member>
        <member name="P:PRISM.Logging.BaseLogger.MostRecentErrorMessage">
            <summary>
            Most recent error message
            </summary>
        </member>
        <member name="P:PRISM.Logging.BaseLogger.TraceMode">
            <summary>
            When true, show additional debug messages at the console
            </summary>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.AllowLog(PRISM.Logging.BaseLogger.LogLevels,PRISM.Logging.BaseLogger.LogLevels)">
            <summary>
            Compare logLevel to mLogLevel
            </summary>
            <param name="messageLogLevel"></param>
            <param name="logThresholdLevel"></param>
            <returns>True if this message should be logged</returns>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.LogDequeueError(System.Int32,System.Int32)">
            <summary>
            Log a local message regarding a message queue dequeue error
            </summary>
            <param name="failedDeqeueueEvents"></param>
            <param name="messageQueueCount"></param>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.LogLocalMessage(PRISM.Logging.BaseLogger.LogLevels,System.String,System.String)">
            <summary>
            Log a message to the local, generic log file
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
            <param name="localLogFilePath"></param>
            <remarks>Used to log errors and warnings when the standard log file (or database) cannot be written to</remarks>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.LogLocalMessage(PRISM.Logging.LogMessage,System.String)">
            <summary>
            Log a message to the local, generic log file
            </summary>
            <param name="logMessage"></param>
            <param name="localLogFilePath"></param>
            <remarks>Used to log errors and warnings when the standard log file (or database) cannot be written to</remarks>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.LogMessage(PRISM.Logging.BaseLogger.LogLevels,System.String,System.Exception)">
            <summary>
            Log a message (provided logLevel is LogLevel or higher)
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.ShowTraceMessage(System.String)">
            <summary>
            Show a trace message at the console if TraceMode is true
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.Debug(System.String,System.Exception)">
            <summary>
            Log a debug message (provided LogLevel is LogLevels.DEBUG)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.Error(System.String,System.Exception)">
            <summary>
            Log an error message (provided LogLevel is LogLevels.ERROR or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.Fatal(System.String,System.Exception)">
            <summary>
            Log a fatal error message (provided LogLevel is LogLevels.FATAL or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.Info(System.String,System.Exception)">
            <summary>
            Log an informational message (provided LogLevel is LogLevels.INFO or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.BaseLogger.Warn(System.String,System.Exception)">
            <summary>
            Log a warning message (provided LogLevel is LogLevels.WARN or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="T:PRISM.Logging.DatabaseLogger">
            <summary>
            Logs messages to a database by calling a stored procedure
            </summary>
        </member>
        <member name="F:PRISM.Logging.DatabaseLogger.LOG_INTERVAL_MILLISECONDS">
            <summary>
            Interval, in milliseconds, between flushing log messages to the database
            </summary>
        </member>
        <member name="F:PRISM.Logging.DatabaseLogger.TIMEOUT_SECONDS">
            <summary>
            Database timeout length, in seconds
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.EchoMessagesToFileLogger">
            <summary>
            When true, also send any messages to the file logger
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.InitialCapsLogTypes">
            <summary>
            When true, log type will be changed from all caps to InitialCaps (e.g. INFO to Info)
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.IsDebugEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.DEBUG or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.IsErrorEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.ERROR or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.IsFatalEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.FATAL or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.IsInfoEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.INFO or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.IsWarnEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.WARN or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.LogLevel">
            <summary>
            Get or set the current log level
            </summary>
            <remarks>
            If the LogLevel is DEBUG, all messages are logged
            If the LogLevel is INFO, all messages except DEBUG messages are logged
            If the LogLevel is ERROR, only FATAL and ERROR messages are logged
            </remarks>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.MachineName">
            <summary>
            The module name identifies the logging process.
            </summary>
        </member>
        <member name="P:PRISM.Logging.DatabaseLogger.UserName">
            <summary>
            The user name running this program
            </summary>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.ChangeConnectionInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update the database connection info
            </summary>
            <param name="moduleName">Program name to be sent to the PostedBy field when contacting the database</param>
            <param name="connectionString">ODBC-style connection string</param>
            <param name="storedProcedure">Stored procedure to call</param>
            <param name="logTypeParamName">LogType parameter name</param>
            <param name="messageParamName">Message parameter name</param>
            <param name="postedByParamName">Log source parameter name</param>
            <param name="logTypeParamSize">LogType parameter size</param>
            <param name="messageParamSize">Message parameter size</param>
            <param name="postedByParamSize">Log source parameter size</param>
            <remarks>Will append today's date to the base name</remarks>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.GetDefaultModuleName">
            <summary>
            Construct the string MachineName:UserName.
            </summary>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.LogLevelToString(PRISM.Logging.BaseLogger.LogLevels)">
            <summary>
            Convert log level to a string, optionally changing from all caps to initial caps
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.RemoveConnectionInfo">
            <summary>
            Disable database logging
            </summary>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.SetLogLevel(PRISM.Logging.BaseLogger.LogLevels)">
            <summary>
            Update the Log Level (called by property LogLevel)
            </summary>
            <param name="logLevel"></param>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.Debug(System.String,System.Exception)">
            <summary>
            Log a debug message (provided LogLevel is LogLevels.DEBUG)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.Error(System.String,System.Exception)">
            <summary>
            Log an error message (provided LogLevel is LogLevels.ERROR or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.Fatal(System.String,System.Exception)">
            <summary>
            Log a fatal error message (provided LogLevel is LogLevels.FATAL or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.Info(System.String,System.Exception)">
            <summary>
            Log an informational message (provided LogLevel is LogLevels.INFO or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.Warn(System.String,System.Exception)">
            <summary>
            Log a warning message (provided LogLevel is LogLevels.WARN or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.WriteLog(PRISM.Logging.BaseLogger.LogLevels,System.String,System.Exception)">
            <summary>
            Log a message (regardless of base.LogLevel)
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:PRISM.Logging.DatabaseLogger.WriteLog(PRISM.Logging.LogMessage)">
            <summary>
            Log a message (regardless of base.LogLevel)
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="T:PRISM.Logging.FileLogger">
            <summary>
            Logs messages to a file
            </summary>
        </member>
        <member name="F:PRISM.Logging.FileLogger.DEFAULT_MAX_ROLLED_LOG_FILES">
            <summary>
            Default number of old log files to keep when AppendDateToBaseFileName is false
            </summary>
        </member>
        <member name="F:PRISM.Logging.FileLogger.LOG_INTERVAL_MILLISECONDS">
            <summary>
            Interval, in milliseconds, between flushing log messages to disk
            </summary>
        </member>
        <member name="F:PRISM.Logging.FileLogger.LOG_FILE_DATECODE">
            <summary>
            Date format for log file names
            </summary>
        </member>
        <member name="F:PRISM.Logging.FileLogger.LOG_FILE_EXTENSION">
            <summary>
            Default log file extension
            </summary>
            <remarks>Appended to the log file name if BaseLogFileName does not have an extension</remarks>
        </member>
        <member name="F:PRISM.Logging.FileLogger.mFailedDequeueEvents">
            <summary>
            Tracks the number of successive dequeue failures
            </summary>
        </member>
        <member name="F:PRISM.Logging.FileLogger.mBaseLogFileName">
            <summary>
            Base log file name (or relative path)
            </summary>
            <remarks>This is updated by ChangeLogFileBaseName or via the constructor</remarks>
        </member>
        <member name="F:PRISM.Logging.FileLogger.mLogFileDate">
            <summary>
            Log file date
            </summary>
        </member>
        <member name="F:PRISM.Logging.FileLogger.mLogFileDateText">
            <summary>
            Log file date (as a string)
            </summary>
        </member>
        <member name="F:PRISM.Logging.FileLogger.mLogFilePath">
            <summary>
            Relative file path to the current log file
            </summary>
            <remarks>update this using method ChangeLogFileName</remarks>
        </member>
        <member name="F:PRISM.Logging.FileLogger.mNeedToRollLogFiles">
            <summary>
            When true, we need to rename existing log files because
            Only valid if AppendDateToBaseFileName is true
            </summary>
            <remarks>Log files are only renamed if a log message is actually logged</remarks>
        </member>
        <member name="P:PRISM.Logging.FileLogger.AppendDateToBaseFileName">
            <summary>
            When true, the actual log file name will have today's date appended to it, in the form mm-dd-yyyy.txt
            When false, the actual log file name will be the base name plus .txt (unless the base name already has an extension)
            If a file exists with that name, but was last modified before today, it will be renamed to BaseName.txt.1
            </summary>
            <remarks>
            Other, existing log files will also be renamed, keeping up to MaxRolledLogFiles old log files
            </remarks>
        </member>
        <member name="P:PRISM.Logging.FileLogger.BaseLogFileName">
            <summary>
            Base log file name
            </summary>
            <remarks>
            If AppendDateToBaseFileName is true, the actual log file name will have today's date appended to it, in the form mm-dd-yyyy.txt
            If AppendDateToBaseFileName is false, the actual log file name will be the base name plus .txt
            (unless the base name already has an extension, then the user-specified extension will be used)
            See also the comments for property AppendDateToBaseFileName
            </remarks>
        </member>
        <member name="P:PRISM.Logging.FileLogger.DefaultLogFileName">
            <summary>
            Default log file name
            </summary>
            <remarks>Used when BaseLogFileName is empty</remarks>
        </member>
        <member name="P:PRISM.Logging.FileLogger.IsDebugEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.DEBUG or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.FileLogger.IsErrorEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.ERROR or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.FileLogger.IsFatalEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.FATAL or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.FileLogger.IsInfoEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.INFO or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.FileLogger.IsWarnEnabled">
            <summary>
            True if info level logging is enabled (LogLevel is LogLevels.WARN or higher)
            </summary>
        </member>
        <member name="P:PRISM.Logging.FileLogger.LogFilePath">
            <summary>
            Current log file path
            </summary>
        </member>
        <member name="P:PRISM.Logging.FileLogger.LogLevel">
            <summary>
            Get or set the current log level
            </summary>
            <remarks>
            If the LogLevel is DEBUG, all messages are logged
            If the LogLevel is INFO, all messages except DEBUG messages are logged
            If the LogLevel is ERROR, only FATAL and ERROR messages are logged
            </remarks>
        </member>
        <member name="P:PRISM.Logging.FileLogger.MaxRolledLogFiles">
            <summary>
            Maximum number of old log files to keep
            Ignored if AppendDateToBaseFileName is True
            </summary>
            <remarks>Defaults to 5; minimum value is 1</remarks>
        </member>
        <member name="M:PRISM.Logging.FileLogger.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Constructor that takes base log file name and appendDateToBaseName
            </summary>
            <param name="baseName">Base log file name (or relative path)</param>
            <param name="appendDateToBaseName">
            When true, the actual log file name will have today's date appended to it, in the form mm-dd-yyyy.txt
            When false, the actual log file name will be the base name plus .txt (unless the base name already has an extension)
            </param>
            <param name="maxRolledLogFiles">
            Maximum number of old log files to keep (Ignored if appendDateToBaseName is True)
            </param>
            <remarks>If baseName is null or empty, the log file name will be named DefaultLogFileName</remarks>
        </member>
        <member name="M:PRISM.Logging.FileLogger.#ctor(System.String,PRISM.Logging.BaseLogger.LogLevels,System.Boolean,System.Int32)">
            <summary>
            Constructor with default values for all parameters
            </summary>
            <param name="baseName">Base log file name (or relative path)</param>
            <param name="logLevel">Log level</param>
            <param name="appendDateToBaseName">
            When true, the actual log file name will have today's date appended to it, in the form mm-dd-yyyy.txt
            When false, the actual log file name will be the base name plus .txt (unless the base name already has an extension)
            </param>
            <param name="maxRolledLogFiles">
            Maximum number of old log files to keep (Ignored if appendDateToBaseName is True)
            </param>
            <remarks>If baseName is null or empty, the log file name will be named DefaultLogFileName</remarks>
        </member>
        <member name="M:PRISM.Logging.FileLogger.ArchiveOldLogs(System.String)">
            <summary>
            Look for log files over 32 days old that can be moved into a subdirectory
            </summary>
            <param name="logFilePath"></param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.ChangeLogFileBaseName(System.String)">
            <summary>
            Update the log file's base name (or relative path)
            </summary>
            <param name="baseName">Base log file name (or relative path)</param>
            <remarks>
            Will append today's date to the base name
            If baseName is null or empty, the log file name will be named DefaultLogFileName
            </remarks>
            <remarks>If baseName is null or empty, the log file name will be named DefaultLogFileName</remarks>
        </member>
        <member name="M:PRISM.Logging.FileLogger.ChangeLogFileBaseName(System.String,System.Boolean)">
            <summary>
            Update the log file's base name (or relative path)
            However, if appendDateToBaseName is false, baseName is the full path to the log file
            </summary>
            <param name="baseName">Base log file name (or relative path)</param>
            <param name="appendDateToBaseName">
            When true, the actual log file name will have today's date appended to it, in the form mm-dd-yyyy.txt
            When false, the actual log file name will be the base name plus .txt (unless the base name already has an extension)
            </param>
            <remarks>If baseName is null or empty, the log file name will be named DefaultLogFileName</remarks>
        </member>
        <member name="M:PRISM.Logging.FileLogger.ChangeLogFileName">
            <summary>
            Changes the base log file name
            </summary>
        </member>
        <member name="M:PRISM.Logging.FileLogger.FlushPendingMessages">
            <summary>
            Immediately write out any queued messages (using the current thread)
            </summary>
            <remarks>
            There is no need to call this method if you create an instance of this class.
            On the other hand, if you only call static methods in this class, call this method
            before ending the program to assure that all messages have been logged.
            </remarks>
        </member>
        <member name="M:PRISM.Logging.FileLogger.LogMessagesCallback(System.Object)">
            <summary>
            Callback invoked by the mQueueLogger timer
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.RollLogFiles(System.DateTime,System.String)">
            <summary>
            Rename existing log files if required
            </summary>
            <param name="currentDate">Current date (local time)</param>
            <param name="currentLogFilePath">Current log file name (for today)</param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.SetLogLevel(PRISM.Logging.BaseLogger.LogLevels)">
            <summary>
            Update the Log Level (called by property LogLevel)
            </summary>
            <param name="logLevel"></param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.StartLogQueuedMessages">
            <summary>
            Check for queued messages
            If found, try to log them, wrapping then attempt with Monitor.TryEnter and Monitor.Exit
            </summary>
        </member>
        <member name="M:PRISM.Logging.FileLogger.Debug(System.String,System.Exception)">
            <summary>
            Log a debug message (provided LogLevel is LogLevels.DEBUG)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.Error(System.String,System.Exception)">
            <summary>
            Log an error message (provided LogLevel is LogLevels.ERROR or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.Fatal(System.String,System.Exception)">
            <summary>
            Log a fatal error message (provided LogLevel is LogLevels.FATAL or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.Info(System.String,System.Exception)">
            <summary>
            Log an informational message (provided LogLevel is LogLevels.INFO or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.Warn(System.String,System.Exception)">
            <summary>
            Log a warning message (provided LogLevel is LogLevels.WARN or higher)
            </summary>
            <param name="message">Log message</param>
            <param name="ex">Optional exception; can be null</param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.WriteLog(PRISM.Logging.BaseLogger.LogLevels,System.String,System.Exception)">
            <summary>
            Log a message (regardless of base.LogLevel)
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.WriteLog(PRISM.Logging.LogMessage)">
            <summary>
            Log a message (regardless of base.LogLevel)
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:PRISM.Logging.FileLogger.Finalize">
            <summary>
            Class is disposing; write out any queued messages
            </summary>
        </member>
        <member name="T:PRISM.Logging.LogMessage">
            <summary>
            Class for tracking individual messages to log
            </summary>
        </member>
        <member name="P:PRISM.Logging.LogMessage.LogLevel">
            <summary>
            Log level (aka log message type)
            </summary>
        </member>
        <member name="P:PRISM.Logging.LogMessage.Message">
            <summary>
            Log message
            </summary>
        </member>
        <member name="P:PRISM.Logging.LogMessage.MessageException">
            <summary>
            Exception associated with the message (may be null)
            </summary>
        </member>
        <member name="P:PRISM.Logging.LogMessage.MessageDateUTC">
            <summary>
            Message date (UTC-based time)
            </summary>
        </member>
        <member name="P:PRISM.Logging.LogMessage.MessageDateLocal">
            <summary>
            Message date (Local time)
            </summary>
        </member>
        <member name="M:PRISM.Logging.LogMessage.#ctor(PRISM.Logging.BaseLogger.LogLevels,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:PRISM.Logging.LogMessage.GetFormattedMessage(System.Boolean)">
            <summary>
            Get the log message, formatted in the form Date, Message, LogType
            </summary>
            <param name="useLocalTime">When true, use the local time, otherwise use UTC time</param>
            <returns>Formatted message (does not include anything regarding MessageException)</returns>
        </member>
        <member name="M:PRISM.Logging.LogMessage.ToString">
            <summary>
            The log message and log type, separated by a comma
            </summary>
            <returns></returns>
        </member>
        <member name="T:PRISM.Logging.ODBCDatabaseLogger">
            <summary>
            Logs messages to a database by calling a stored procedure
            Connect using an ODBC driver
            </summary>
            <remarks>Connect using an ODBC driver</remarks>
        </member>
        <member name="F:PRISM.Logging.ODBCDatabaseLogger.mFailedDequeueEvents">
            <summary>
            Tracks the number of successive dequeue failures
            </summary>
        </member>
        <member name="F:PRISM.Logging.ODBCDatabaseLogger.mModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:PRISM.Logging.ODBCDatabaseLogger.ConnectionString">
            <summary>
            ODBC style connection string
            </summary>
        </member>
        <member name="P:PRISM.Logging.ODBCDatabaseLogger.ModuleName">
            <summary>
            Program name to pass to the PostedBy field when contacting the database
            </summary>
            <remarks>Will be auto-defined in LogQueuedMessages if blank</remarks>
        </member>
        <member name="P:PRISM.Logging.ODBCDatabaseLogger.StoredProcedureName">
            <summary>
            Stored procedure where log messages will be posted
            </summary>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.#ctor(PRISM.Logging.BaseLogger.LogLevels)">
            <summary>
            Constructor when the connection info is unknown
            </summary>
            <param name="logLevel"></param>
            <remarks>No database logging will occur until ChangeConnectionInfo is called (to define the connection string)</remarks>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.#ctor(System.String,System.String,PRISM.Logging.BaseLogger.LogLevels,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="moduleName">
            Program name to pass to the postedByParamName field when contacting the database
            (will be auto-defined later if blank)
            </param>
            <param name="connectionString">ODBC-style connection string</param>
            <param name="logLevel">Log level</param>
            <param name="storedProcedure">Stored procedure to call</param>
            <param name="logTypeParamName">LogType parameter name (string representation of logLevel</param>
            <param name="messageParamName">Message parameter name</param>
            <param name="postedByParamName">Log source parameter name</param>
            <param name="logTypeParamSize">LogType parameter size</param>
            <param name="messageParamSize">Message parameter size</param>
            <param name="postedByParamSize">Log source parameter size</param>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.ChangeConnectionInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update the database connection info
            </summary>
            <param name="moduleName">
            Program name to pass to the postedByParamName field when contacting the database 
            (will be auto-defined later if blank)
            </param>
            <param name="connectionString">ODBC-style connection string</param>
            <param name="storedProcedure">Stored procedure to call</param>
            <param name="logTypeParamName">LogType parameter name</param>
            <param name="messageParamName">Message parameter name</param>
            <param name="postedByParamName">Log source parameter name</param>
            <param name="logTypeParamSize">LogType parameter size</param>
            <param name="messageParamSize">Message parameter size</param>
            <param name="postedByParamSize">Log source parameter size</param>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.ConvertSqlServerConnectionStringToODBC(System.String,System.String)">
            <summary>
            Convert a .NET framework SQL Server connection string to an ODBC-style connection string
            </summary>
            <param name="sqlServerConnectionString">SQL Server connection string</param>
            <param name="odbcDriverName">
            Typical values are:
              "SQL Server Native Client 11.0" for SQL Server 2012
              "SQL Server Native Client 10.0" for SQL Server 2008
              "SQL Native Client"             for SQL Server 2005
              "SQL Server"                    for SQL Server 2000
            </param>
            <returns></returns>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.LogMessagesCallback(System.Object)">
            <summary>
            Callback invoked by the mQueueLogger timer
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.RemoveConnectionInfo">
            <summary>
            Disable database logging
            </summary>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.StartLogQueuedMessages">
            <summary>
            Check for queued messages
            If found, try to log them, wrapping then attempt with Monitor.TryEnter and Monitor.Exit
            </summary>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.WriteLog(PRISM.Logging.LogMessage)">
            <summary>
            Log a message (regardless of base.LogLevel)
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:PRISM.Logging.ODBCDatabaseLogger.Finalize">
            <summary>
            Class is disposing; write out any queued messages
            </summary>
        </member>
        <member name="T:PRISM.Logging.SQLServerDatabaseLogger">
            <summary>
            Logs messages to a database by calling a stored procedure
            Connect using System.Data.SqlClient
            </summary>
            <remarks>Can only log to a single database at a time</remarks>
        </member>
        <member name="F:PRISM.Logging.SQLServerDatabaseLogger.mFailedDequeueEvents">
            <summary>
            Tracks the number of successive dequeue failures
            </summary>
        </member>
        <member name="F:PRISM.Logging.SQLServerDatabaseLogger.mModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:PRISM.Logging.SQLServerDatabaseLogger.ConnectionString">
            <summary>
            SQL Server style connection string
            </summary>
        </member>
        <member name="P:PRISM.Logging.SQLServerDatabaseLogger.ModuleName">
            <summary>
            Program name to pass to the PostedBy field when contacting the database
            </summary>
            <remarks>Will be auto-defined in LogQueuedMessages if blank</remarks>
        </member>
        <member name="P:PRISM.Logging.SQLServerDatabaseLogger.StoredProcedureName">
            <summary>
            Stored procedure where log messages will be posted
            </summary>
        </member>
        <member name="M:PRISM.Logging.SQLServerDatabaseLogger.#ctor(PRISM.Logging.BaseLogger.LogLevels)">
            <summary>
            Constructor when the connection info is unknown
            </summary>
            <param name="logLevel"></param>
            <remarks>No database logging will occur until ChangeConnectionInfo is called (to define the connection string)</remarks>
        </member>
        <member name="M:PRISM.Logging.SQLServerDatabaseLogger.#ctor(System.String,System.String,PRISM.Logging.BaseLogger.LogLevels,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="moduleName">
            Program name to pass to the postedByParamName field when contacting the database
            (will be auto-defined later if blank)
            </param>
            <param name="connectionString">SQL Server style connection string</param>
            <param name="logLevel">Log level</param>
            <param name="storedProcedure">Stored procedure to call</param>
            <param name="logTypeParamName">LogType parameter name (string representation of logLevel</param>
            <param name="messageParamName">Message parameter name</param>
            <param name="postedByParamName">Log source parameter name</param>
            <param name="logTypeParamSize">LogType parameter size</param>
            <param name="messageParamSize">Message parameter size</param>
            <param name="postedByParamSize">Log source parameter size</param>
        </member>
        <member name="M:PRISM.Logging.SQLServerDatabaseLogger.ChangeConnectionInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update the database connection info
            </summary>
            <param name="moduleName">
            Program name to pass to the postedByParamName field when contacting the database
            (will be auto-defined later if blank)
            </param>
            <param name="connectionString">SQL Server style connection string</param>
            <param name="storedProcedure">Stored procedure to call</param>
            <param name="logTypeParamName">LogType parameter name</param>
            <param name="messageParamName">Message parameter name</param>
            <param name="postedByParamName">Log source parameter name</param>
            <param name="logTypeParamSize">LogType parameter size</param>
            <param name="messageParamSize">Message parameter size</param>
            <param name="postedByParamSize">Log source parameter size</param>
        </member>
        <member name="M:PRISM.Logging.SQLServerDatabaseLogger.LogMessagesCallback(System.Object)">
            <summary>
            Callback invoked by the mQueueLogger timer
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:PRISM.Logging.SQLServerDatabaseLogger.RemoveConnectionInfo">
            <summary>
            Disable database logging
            </summary>
        </member>
        <member name="M:PRISM.Logging.SQLServerDatabaseLogger.StartLogQueuedMessages">
            <summary>
            Check for queued messages
            If found, try to log them, wrapping then attempt with Monitor.TryEnter and Monitor.Exit
            </summary>
        </member>
        <member name="M:PRISM.Logging.SQLServerDatabaseLogger.WriteLog(PRISM.Logging.LogMessage)">
            <summary>
            Log a message (regardless of base.LogLevel)
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:PRISM.Logging.SQLServerDatabaseLogger.Finalize">
            <summary>
            Class is disposing; write out any queued messages
            </summary>
        </member>
        <member name="T:PRISM.ProgressData">
            <summary>
            Add functionality to progress reporting using <see cref="T:System.IProgress`1"/>, including facilitating child process progress as a subset of overall progress.
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.Status">
            <summary>
            Status string - for reporting textual information about the current task
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.StatusInternal">
            <summary>
            Internal status string - for tracking nested progress status
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.ProgressObj">
            <summary>
            Referenced <see cref="T:System.IProgress`1"/> object, that all updates are pushed out to.
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.ThrowExceptionOnBackwardsProgress">
            <summary>
            When true, anything that will cause progress to go backwards will cause an exception; otherwise, such changes are silently handled to prevent backwards progress. Should not be true in general release code.
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.PreventBackwardsProgress">
            <summary>
            When set to true, logic is used that will prevent progress from jumping backwards (errors are silently ignored; see <see cref="P:PRISM.ProgressData.ThrowExceptionOnBackwardsProgress"/> to trigger exceptions instead)
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.Percent">
            <summary>
            The current percent progress of the task. Updated using <see cref="M:PRISM.ProgressData.Report(System.Double,System.String)"/> or variants
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.IsPartialRange">
            <summary>
            If the progress reporting will be blocked into ranges
            Setting this to "true" will reset MinPercentage and MaxPercentage to 0.
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.MinPercentage">
            <summary>
            Must be less than current MaxPercentage
            </summary>
            <remarks>Will set IsPartialRange to true</remarks>
        </member>
        <member name="P:PRISM.ProgressData.MaxPercentage">
            <summary>
            Must be greater than current MinPercentage
            </summary>
            <remarks>Will set IsPartialRange to true</remarks>
        </member>
        <member name="P:PRISM.ProgressData.UpdateFrequencySeconds">
            <summary>
            Throttling for console output - used with ShouldUpdate() to provide a simple throttle to reduce the console output
            </summary>
        </member>
        <member name="P:PRISM.ProgressData.LastUpdated">
            <summary>
            Last output time, for throttling updates for console output
            </summary>
            <remarks>static for the case of multiple ProgressData objects being fed to "Progress.Report()"</remarks>
        </member>
        <member name="P:PRISM.ProgressData.HasUsedPartialRange">
            <summary>
            Track if a partial range (not 0-100%) has been set previously. This should never be set to false outside of object construction.
            </summary>
        </member>
        <member name="F:PRISM.ProgressData._hasUsedPartialRangeWithAReallyLongAndNastyNameSoThatNoOneEverWantsToUseUtBesidesWhereItIsSupposedToBeUsed">
            <summary>
            Backing variable for HasUsedPartialRange. ONLY USE INSIDE OF HasUsedPartialRange GETTER/SETTER.
            </summary>
        </member>
        <member name="M:PRISM.ProgressData.#ctor(System.IProgress{PRISM.ProgressData},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="progress">The progress object that "ProgressData.Report" should call "Report" on</param>
            <param name="preventBackwardsProgress">Set to false to disable the logic preventing reverse progress</param>
        </member>
        <member name="M:PRISM.ProgressData.StepRange(System.Double,System.String)">
            <summary>
            Change to a new range block
            </summary>
            <param name="newMaxPercentage">New max percent for range, must be greater than current max percent.</param>
            <param name="newStatus">Updated status string, null for no update</param>
            <remarks>Will set IsPartialRange to true</remarks>
            <remarks>If current max percent is 100, the new max percent can be any value between 0 and 100</remarks>
        </member>
        <member name="M:PRISM.ProgressData.CheckSetMinMaxRange(System.Double,System.Double)">
            <summary>
            Perform validity checks on new min/max percent values, and then set them accordingly
            </summary>
            <param name="newMin"></param>
            <param name="newMax"></param>
        </member>
        <member name="M:PRISM.ProgressData.UpdatePercent(System.Double)">
            <summary>
            Update percent, and return object. For single-lining a progress update and report with <see cref="M:System.IProgress`1.Report(`0)"/>
            </summary>
            <param name="pct"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.ProgressData.ShouldUpdate">
            <summary>
            Check function to limit output frequency, when outputting to console.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.ProgressData.Report(System.String)">
            <summary>
            Updates the status, then calls the stored progress object's "Report"
            </summary>
            <param name="newStatus">Updated status string</param>
        </member>
        <member name="M:PRISM.ProgressData.Report(System.Double,System.String)">
            <summary>
            Updates the percent, then calls the stored progress object's "Report"
            </summary>
            <param name="pct">percent progress, 0 to 100</param>
            <param name="newStatus">Updated status string, null for no update</param>
        </member>
        <member name="M:PRISM.ProgressData.ReportDecimal(System.Double,System.String)">
            <summary>
            Updates the percent, then calls the stored progress object's "Report"
            </summary>
            <param name="pct">percent progress, 0 to 1</param>
            <param name="newStatus">Updated status string, null for no update</param>
        </member>
        <member name="M:PRISM.ProgressData.Report(System.Double,System.Double,System.String)">
            <summary>
            Updates the percent, then calls the stored progress object's "Report"
            </summary>
            <param name="count">The count progress, or numerator</param>
            <param name="total">The total number of objects to be counted, or denominator</param>
            <param name="newStatus">Updated status string, null for no update</param>
        </member>
        <member name="T:PRISM.ShareConnector">
            <summary>
            Connects to a file share using a password and user name.
            </summary>
            <remarks>
            The default behaviour when connecting to SMB/CIFS file shares is for
            the system to supply the user name and password used to logon to the local machine.
            This class allows you to connect to SMB/CIFS file shares when the use of
            SSPI isn't availabe and/or when you don't wish to use the default behaviour.
            It's quite comparable to the "Connect using a different user name." option in the Map Network Drive
            utility in Windows.  Much of this code came from Microsoft Knowledge Base Article - 173011.  It was
            then modified to fit our needs.
            </remarks>
        </member>
        <member name="T:PRISM.ShareConnector.udtNetResource">
            <summary>
            This structure is used to group a bunch of member variables.
            </summary>
        </member>
        <member name="F:PRISM.ShareConnector.RESOURCEUSAGE_CONNECTABLE">
            <summary>
             Constant that may be used by NETRESOURCE->dwUsage
            </summary>
        </member>
        <member name="F:PRISM.ShareConnector.RESOURCEUSAGE_CONTAINER">
            <summary>
             Constant that may be used by NETRESOURCE->dwUsage
            </summary>
        </member>
        <member name="M:PRISM.ShareConnector.#ctor(System.String,System.String)">
            <summary>
            This version of the constructor requires you to specify the sharename by setting the <see cref="P:PRISM.ShareConnector.Share">Share</see> property.
            </summary>
            <param name="userName">Username</param>
            <param name="userPwd">Password</param>
            <remarks>For local user accounts, it is safest to use HostName\username</remarks>
        </member>
        <member name="M:PRISM.ShareConnector.#ctor(System.String,System.String,System.String)">
            <summary>
            This version of the constructor allows you to specify the sharename as an argument.
            </summary>
            <param name="shareName">The name of the file share to which you will connect.</param>
            <param name="userName">Username</param>
            <param name="userPwd">Password</param>
            <remarks>For local user accounts, it is safest to use HostName\username</remarks>  ///
        </member>
        <member name="M:PRISM.ShareConnector.RealNew(System.String,System.String)">
            <summary>
            This routine is called by each of the constructors to make the actual assignments in a consistent fashion.
            </summary>
            <param name="userName">Username</param>
            <param name="userPwd">Password</param>
        </member>
        <member name="P:PRISM.ShareConnector.Share">
            <summary>
            Sets the name of the file share to which you will connect.
            </summary>
        </member>
        <member name="M:PRISM.ShareConnector.Connect(System.String)">
            <summary>
            Connects to specified share using account/password specified through the constructor and
            the file share name passed as an argument.
            </summary>
            <param name="shareName">The name of the file share to which you will connect.</param>
        </member>
        <member name="M:PRISM.ShareConnector.Connect">
            <summary>
            Connects to specified share using account/password specified through the constructor.
            Requires you to have specifyed the sharename by setting the <see cref="P:PRISM.ShareConnector.Share">Share</see> property.
            </summary>
        </member>
        <member name="M:PRISM.ShareConnector.DefineShareName(System.String)">
            <summary>
            Updates class variable with the specified share path
            </summary>
            <param name="shareName"></param>
            <remarks>If the path ends in a forward slash then the slash will be removed</remarks>
        </member>
        <member name="M:PRISM.ShareConnector.RealConnect">
            <summary>
            Connects to specified share using account/password specified previously.
            This is the function that actually does the connection based on the setup
            from the Connect function.
            </summary>
        </member>
        <member name="M:PRISM.ShareConnector.Disconnect">
            <summary>
            Disconnects the files share.
            </summary>
        </member>
        <member name="P:PRISM.ShareConnector.ErrorMessage">
            <summary>
            Gets the error message returned by the Connect and Disconnect functions.
            </summary>
        </member>
        <member name="T:PRISM.StringUtilities">
            <summary>
            Utilities for advanced output formatting of doubles
            </summary>
        </member>
        <member name="F:PRISM.StringUtilities.mFormatStrings">
            <summary>
            Dictionary that tracks the format string used for each digitsOfPrecision value
            </summary>
            <remarks>
            Keys are the number of digits of precision
            Values are strings like "0.0", "0.0#", "0.0##", etc.
            </remarks>
        </member>
        <member name="F:PRISM.StringUtilities.mFormatStringsScientific">
            <summary>
            Dictionary that tracks the format string used for each digitsOfPrecision value displayed with scientific notation
            </summary>
            <remarks>
            Keys are the number of digits of precision and
              "false" if the format string is of the form 0.00E+00 or
              "true"  if the format string is of the form 0.00E+000
            Values are strings like "0.0E+00", "0.0#E+00", "0.0##E+00", "0.0#E+000", or "0.0##E+000"
            </remarks>
        </member>
        <member name="M:PRISM.StringUtilities.GetFormatString(System.Int32)">
            <summary>
            Get the format string for the given number of digits after the decimal
            </summary>
            <param name="digitsAfterDecimal"></param>
            <returns>Strings like "0.0", "0.0#", "0.0##"</returns>
        </member>
        <member name="M:PRISM.StringUtilities.GetFormatStringScientific(System.Double,System.Int32)">
            <summary>
            Get the format string for the given number of digits after the decimal
            </summary>
            <param name="value">Value being formatted</param>
            <param name="digitsAfterDecimal"></param>
            <returns>Strings like "0.0E+00", "0.0#E+00", "0.0##E+00", "0.0#E+000", or "0.0##E+000"</returns>
        </member>
        <member name="M:PRISM.StringUtilities.ValueToString(System.Double)">
            <summary>
            Convert value to a string with 5 total digits of precision
            </summary>
            <param name="value">Number to convert to text</param>
            <returns>Number as text</returns>
            <remarks>Numbers larger than 1000000 or smaller than 0.000001 will be in scientific notation</remarks>
        </member>
        <member name="M:PRISM.StringUtilities.ValueToString(System.Double,System.Byte)">
            <summary>
            Convert value to a string with the specified total digits of precision
            </summary>
            <param name="value">Number to convert to text</param>
            <param name="digitsOfPrecision">Total digits of precision (before and after the decimal point)</param>
            <returns>Number as text</returns>
            <remarks>Numbers larger than 1000000 or smaller than 0.000001 will be in scientific notation</remarks>
        </member>
        <member name="M:PRISM.StringUtilities.ValueToString(System.Double,System.Byte,System.Double)">
            <summary>
            Convert value to a string with the specified total digits of precision and customized scientific notation threshold
            </summary>
            <param name="value">Number to convert to text</param>
            <param name="digitsOfPrecision">Total digits of precision (before and after the decimal point)</param>
            <param name="scientificNotationThreshold">
            Values larger than this threshold (positive or negative) will be converted to scientific notation
            Also, values less than "1 / scientificNotationThreshold" will be converted to scientific notation
            Thus, if this threshold is 1000000, numbers larger than 1000000 or smaller than 0.000001 will be in scientific notation
            </param>
            <returns>Number as text</returns>
            <remarks>This function differs from DblToString in that here digitsOfPrecision is the total digits while DblToString focuses on the number of digits after the decimal point</remarks>
        </member>
        <member name="M:PRISM.StringUtilities.DblToString(System.Double,System.Byte,System.Double)">
            <summary>
            Format the value to a string with a fixed number of decimal points
            </summary>
            <param name="value">Value to format</param>
            <param name="digitsAfterDecimal">Digits to show after the decimal place (0 or higher)</param>
            <param name="thresholdScientific">Numbers below this level will be displayed using Scientific notation</param>
            <returns>String representation of the value</returns>
            <remarks>If digitsOfPrecision is 0, will round the number to the nearest integer</remarks>
        </member>
        <member name="M:PRISM.StringUtilities.DblToString(System.Double,System.Byte,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Format the value to a string with a fixed number of decimal points
            </summary>
            <param name="value">Value to format</param>
            <param name="digitsAfterDecimal">Digits to show after the decimal place (0 or higher)</param>
            <param name="limitDecimalsForLargeValues">When true, will limit the number of decimal points shown for values over 1</param>
            <param name="thresholdScientific">Numbers below this level will be displayed using Scientific notation</param>
            <param name="invariantCulture">
            When true (default) numbers will always use a period for the decimal point.
            When false, the decimal point symbol will depend on the current system's culture settings.
            </param>
            <returns>String representation of the value</returns>
            <remarks>If digitsOfPrecision is 0, will round the number to the nearest integer</remarks>
        </member>
        <member name="M:PRISM.StringUtilities.DblToStringScientific(System.Double,System.Byte,System.Boolean)">
            <summary>
            Format the value to a string using scientific notation
            </summary>
            <param name="value">Value to format</param>
            <param name="digitsAfterDecimal">Digits to show after the decimal place (0 or higher)</param>
            <param name="invariantCulture">
            When true (default) numbers will always use a period for the decimal point.
            When false, the decimal point symbol will depend on the current system's culture settings.
            </param>
            <returns>String representation of the value</returns>
            <remarks>If digitsOfPrecision is 0, will round the number to the nearest integer</remarks>
        </member>
        <member name="T:PRISM.SystemInfo">
            <summary>
            Class for streamlined access to system processor and memory information
            </summary>
            <remarks>Supports both Windows and Linux (uses clsOSVersionInfo to determine the OS at runtime)</remarks>
        </member>
        <member name="P:PRISM.SystemInfo.SystemInfoObject">
            <summary>
            Get the implementation of <see cref="T:PRISM.ISystemInfo"/> that is providing the data
            </summary>
        </member>
        <member name="M:PRISM.SystemInfo.GetCoreCount">
            <summary>
            Report the number of cores on this system
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>
            Should not be affected by hyperthreading, so a computer with two 8-core chips will report 16 cores, even if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.SystemInfo.GetLogicalCoreCount">
            <summary>
            Report the number of cores on this system
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>
            Will be affected by hyperthreading, so a computer with two 8-core chips will report 32 cores if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.SystemInfo.GetProcessorPackageCount">
            <summary>
            Report the number of processor packages on this system
            </summary>
            <returns>The number of processor packages on this computer</returns>
        </member>
        <member name="M:PRISM.SystemInfo.GetNumaNodeCount">
            <summary>
            Report the number of NUMA Nodes on this system
            </summary>
            <returns>The number of NUMA Nodes on this computer</returns>
        </member>
        <member name="M:PRISM.SystemInfo.GetFreeMemoryMB">
            <summary>
            Determine the free system memory, in MB
            </summary>
            <returns>Free memory, or -1 if an error</returns>
        </member>
        <member name="M:PRISM.SystemInfo.GetTotalMemoryMB">
            <summary>
            Determine the total system memory, in MB
            </summary>
            <returns>Total memory, or -1 if an error</returns>
        </member>
        <member name="T:PRISM.WindowsSystemInfo">
            <summary>
            System information for Windows, pulled via P/Invoke
            </summary>
        </member>
        <member name="M:PRISM.WindowsSystemInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PRISM.WindowsSystemInfo.GetCoreCount">
            <inheritdoc />
            <summary>
            Report the number of cores on this system
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>
            Should not be affected by hyperthreading, so a computer with two 8-core chips will report 16 cores, even if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.WindowsSystemInfo.GetLogicalCoreCount">
            <inheritdoc />
            <summary>
            Report the number of logical cores on this system
            </summary>
            <returns>The number of logical cores on this computer</returns>
            <remarks>
            Will be affected by hyperthreading, so a computer with two 8-core chips will report 32 cores if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.WindowsSystemInfo.GetPhysicalCoreCount">
            <summary>
            Report the number of cores on this system
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>
            Should not be affected by hyperthreading, so a computer with two 8-core chips will report 16 cores, even if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.WindowsSystemInfo.GetProcessorPackageCount">
            <inheritdoc />
            <summary>
            Report the number of processor packages on this system
            </summary>
            <returns>The number of processor packages on this computer</returns>
        </member>
        <member name="M:PRISM.WindowsSystemInfo.GetNumaNodeCount">
            <inheritdoc />
            <summary>
            Report the number of NUMA Nodes on this system
            </summary>
            <returns>The number of NUMA Nodes on this computer</returns>
        </member>
        <member name="M:PRISM.WindowsSystemInfo.GetFreeMemoryMB">
            <inheritdoc />
            <summary>
            Determine the free system memory, in MB
            </summary>
            <returns>Free memory, or -1 if an error</returns>
        </member>
        <member name="M:PRISM.WindowsSystemInfo.GetTotalMemoryMB">
            <inheritdoc />
            <summary>
            Determine the total system memory, in MB
            </summary>
            <returns>Total memory, or -1 if an error</returns>
        </member>
        <member name="T:PRISM.WindowsSystemInfoInternal">
            <summary>
            Internal implementation of WindowsSystemInfo. Internal to avoid big errors when trying to instantiate.
            </summary>
        </member>
        <member name="T:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX">
            <summary>
            Contains information about the current state of both physical and virtual memory, including extended memory
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.dwLength">
            <summary>
            Size of the structure, in bytes. You must set this member before calling GlobalMemoryStatusEx.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.dwMemoryLoad">
            <summary>
            Number between 0 and 100 that specifies the approximate percentage of physical memory that is in use (0 indicates no memory use and 100 indicates full memory use).
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.ullTotalPhys">
            <summary>
            Total size of physical memory, in bytes.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.ullAvailPhys">
            <summary>
            Size of physical memory available, in bytes.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.ullTotalPageFile">
            <summary>
            Size of the committed memory limit, in bytes. This is physical memory plus the size of the page file, minus a small overhead.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.ullAvailPageFile">
            <summary>
            Size of available memory to commit, in bytes. The limit is ullTotalPageFile.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.ullTotalVirtual">
            <summary>
            Total size of the user mode portion of the virtual address space of the calling process, in bytes.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.ullAvailVirtual">
            <summary>
            Size of unreserved and uncommitted memory in the user mode portion of the virtual address space of the calling process, in bytes.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.MEMORYSTATUSEX.ullAvailExtendedVirtual">
            <summary>
            Size of unreserved and uncommitted memory in the extended portion of the virtual address space of the calling process, in bytes.
            </summary>
        </member>
        <member name="T:PRISM.WindowsSystemInfoInternal.LOGICAL_PROCESSOR_RELATIONSHIP">
            <summary>
            Possible relationships between logical processors.
            See https://msdn.microsoft.com/en-us/library/windows/desktop/dd405488(v=vs.85).aspx
            See https://msdn.microsoft.com/en-us/library/windows/desktop/ms684197(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorCore">
            <summary>
            The specified logical processors share a single processor core.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.LOGICAL_PROCESSOR_RELATIONSHIP.RelationNumaNode">
            <summary>
            The specified logical processors are part of the same NUMA node.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.LOGICAL_PROCESSOR_RELATIONSHIP.RelationCache">
            <summary>
            The specified logical processors share a cache.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorPackage">
            <summary>
            The specified logical processors share a physical package (a single package socketed or soldered onto a motherboard may contain multiple processor cores or threads, each of which is treated as a separate processor by the operating system).
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.LOGICAL_PROCESSOR_RELATIONSHIP.RelationGroup">
            <summary>
            The specified logical processors share a single processor group.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.LOGICAL_PROCESSOR_RELATIONSHIP.RelationAll">
            <summary>
            On input, retrieves information about all possible relationship types. This value is not used on output.
            </summary>
        </member>
        <member name="P:PRISM.WindowsSystemInfoInternal.GROUP_AFFINITY.Mask">
            <summary>
            A bitmap that specifies the affinity for zero or more processors within the specified group.
            Platform-specific, needs to be 32 bits for 32-bit systems and 64 bits for 64-bit systems
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.GROUP_AFFINITY.MaskPtr">
            <summary>
            A platform-dependent method to get the Mask
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.GROUP_AFFINITY.Group">
            <summary>
            The processor group number.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.GROUP_AFFINITY.Reserved0">
            <summary>
            This member is reserved. Array of size 3
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_RELATIONSHIP.Flags">
            <summary>
            If the Relationship member of the SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX structure is RelationProcessorCore, this member is LTP_PC_SMT if the core has more than one logical processor, or 0 if the core has one logical processor.
            If the Relationship member of the SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX structure is RelationProcessorPackage, this member is always 0.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_RELATIONSHIP.EfficiencyClass">
            <summary>
            If the Relationship member of the SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX structure is RelationProcessorCore, EfficiencyClass specifies the intrinsic tradeoff between performance and power for the applicable core. A core with a higher value for the efficiency class has intrinsically greater performance and less efficiency than a core with a lower value for the efficiency class. EfficiencyClass is only nonzero on systems with a heterogeneous set of cores.
            If the Relationship member of the SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX structure is RelationProcessorPackage, EfficiencyClass is always 0.
            The minimum operating system version that supports this member is Windows 10.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_RELATIONSHIP.Reserved0_7">
            <summary>
            This member is reserved. Array of size 21
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_RELATIONSHIP.GroupCount">
            <summary>
            This member specifies the number of entries in the GroupMask array. For more information, see Remarks.
            </summary>
        </member>
        <member name="P:PRISM.WindowsSystemInfoInternal.PROCESSOR_RELATIONSHIP.GroupMask">
            <summary>
            An array of GROUP_AFFINITY structures. The GroupCount member specifies the number of structures in the array. Each structure in the array specifies a group number and processor affinity within the group.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_RELATIONSHIP.GroupMaskPtr">
            <summary>
            Pointer to the array of GroupMasks
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.NUMA_NODE_RELATIONSHIP.NodeNumber">
            <summary>
            The number of the NUMA node.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.NUMA_NODE_RELATIONSHIP.Reserved0_7">
            <summary>
            This member is reserved. Array of size 20
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.NUMA_NODE_RELATIONSHIP.GroupMask">
            <summary>
            A GROUP_AFFINITY structure that specifies a group number and processor affinity within the group.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_CACHE_TYPE.CacheUnified">
            <summary>
            The cache is unified.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_CACHE_TYPE.CacheInstruction">
            <summary>
            The cache is for processor instructions.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_CACHE_TYPE.CacheData">
            <summary>
            The cache is for data.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_CACHE_TYPE.CacheTrace">
            <summary>
            The cache is for traces.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.CACHE_RELATIONSHIP.Level">
            <summary>
            The cache level. This member can be one of the following values: 1 for L1, 2 for L2, 3 for L3.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.CACHE_RELATIONSHIP.Associativity">
            <summary>
            The cache associativity. If this member is CACHE_FULLY_ASSOCIATIVE (0xFF), the cache is fully associative.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.CACHE_RELATIONSHIP.LineSize">
            <summary>
            The cache line size, in bytes.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.CACHE_RELATIONSHIP.CacheSize">
            <summary>
            The cache size, in bytes.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.CACHE_RELATIONSHIP.Type">
            <summary>
            The cache type. This member is a PROCESSOR_CACHE_TYPE value.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.CACHE_RELATIONSHIP.Reserved0_7">
            <summary>
            This member is reserved. Array of size 20
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.CACHE_RELATIONSHIP.GroupMask">
            <summary>
            A GROUP_AFFINITY structure that specifies a group number and processor affinity within the group.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_GROUP_INFO.MaximumProcessorCount">
            <summary>
            The maximum number of processors in the group.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_GROUP_INFO.ActiveProcessorCount">
            <summary>
            The number of active processors in the group.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_GROUP_INFO.Reserved0_7">
            <summary>
            This member is reserved. Array of size 38
            </summary>
        </member>
        <member name="P:PRISM.WindowsSystemInfoInternal.PROCESSOR_GROUP_INFO.ActiveProcessorMask">
            <summary>
            A bitmap that specifies the affinity for zero or more active processors within the group.
            Platform-specific, needs to be 32 bits for 32-bit systems and 64 bits for 64-bit systems
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.PROCESSOR_GROUP_INFO.ActiveProcessorMaskPtr">
            <summary>
            A platform-dependent method to get the Mask
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.GROUP_RELATIONSHIP.MaximumGroupCount">
            <summary>
            The maximum number of processor groups on the system.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.GROUP_RELATIONSHIP.ActiveGroupCount">
            <summary>
            The number of active groups on the system. This member indicates the number of PROCESSOR_GROUP_INFO structures in the GroupInfo array.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.GROUP_RELATIONSHIP.Reserved0_7">
            <summary>
            This member is reserved. Array of size 20
            </summary>
        </member>
        <member name="P:PRISM.WindowsSystemInfoInternal.GROUP_RELATIONSHIP.GroupInfo">
            <summary>
            An array of PROCESSOR_GROUP_INFO structures. Each structure represents the number and affinity of processors in an active group on the system.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.GROUP_RELATIONSHIP.GroupInfoPtr">
            <summary>
            Pointer to the array of GroupInfos
            </summary>
        </member>
        <member name="P:PRISM.WindowsSystemInfoInternal.ISYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX.ProcRelationship">
            <summary>
            The type of relationship between the logical processors.
            </summary>
        </member>
        <member name="P:PRISM.WindowsSystemInfoInternal.ISYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX.StructSize">
            <summary>
            The size of the structure
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.SLPI_PROCESSOR_RELATIONSHIP.Relationship">
            <summary>
            The type of relationship between the logical processors.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.SLPI_PROCESSOR_RELATIONSHIP.Size">
            <summary>
            The size of the structure
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.SLPI_NUMA_NODE_RELATIONSHIP.Relationship">
            <summary>
            The type of relationship between the logical processors.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.SLPI_NUMA_NODE_RELATIONSHIP.Size">
            <summary>
            The size of the structure
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.SLPI_CACHE_RELATIONSHIP.Relationship">
            <summary>
            The type of relationship between the logical processors.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.SLPI_CACHE_RELATIONSHIP.Size">
            <summary>
            The size of the structure
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.SLPI_GROUP_RELATIONSHIP.Relationship">
            <summary>
            The type of relationship between the logical processors.
            </summary>
        </member>
        <member name="F:PRISM.WindowsSystemInfoInternal.SLPI_GROUP_RELATIONSHIP.Size">
            <summary>
            The size of the structure
            </summary>
        </member>
        <member name="M:PRISM.WindowsSystemInfoInternal.GetCoreCount">
            <summary>
            Report the number of cores on this system
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>
            Should not be affected by hyperthreading, so a computer with two 8-core chips will report 16 cores, even if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.WindowsSystemInfoInternal.GetLogicalCoreCount">
            <summary>
            Report the number of logical cores on this system
            </summary>
            <returns>The number of logical cores on this computer</returns>
            <remarks>
            Will be affected by hyperthreading, so a computer with two 8-core chips will report 32 cores if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.WindowsSystemInfoInternal.GetPhysicalCoreCount">
            <summary>
            Report the number of cores on this system
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>
            Should not be affected by hyperthreading, so a computer with two 8-core chips will report 16 cores, even if Hyperthreading is enabled
            </remarks>
        </member>
        <member name="M:PRISM.WindowsSystemInfoInternal.GetProcessorPackageCount">
            <summary>
            Report the number of processor packages on this system
            </summary>
            <returns>The number of processor packages on this computer</returns>
        </member>
        <member name="M:PRISM.WindowsSystemInfoInternal.GetNumaNodeCount">
            <summary>
            Report the number of NUMA Nodes on this system
            </summary>
            <returns>The number of NUMA Nodes on this computer</returns>
        </member>
        <member name="M:PRISM.WindowsSystemInfoInternal.GetFreeMemoryMB">
            <summary>
            Determine the free system memory, in MB
            </summary>
            <returns>Free memory, or -1 if an error</returns>
        </member>
        <member name="M:PRISM.WindowsSystemInfoInternal.GetTotalMemoryMB">
            <summary>
            Determine the total system memory, in MB
            </summary>
            <returns>Total memory, or -1 if an error</returns>
        </member>
        <member name="T:PRISM.XMLFileReader">
            <summary>
            Tools for manipulating XML settings files
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the XMLFileReader (non case-sensitive)
            </summary>
            <param name="xmlFilename">The name of the XML file.</param>
            <param name="isCaseSensitive"></param>
            <param name="notifyOnException">When true, raise event InformationMessage if an exception occurs</param>
        </member>
        <member name="P:PRISM.XMLFileReader.IniFilename">
            <summary>
            Legacy property; calls XmlFilename
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReader.XmlFilename">
            <summary>
            This routine returns the name of the ini file.
            </summary>
            <return>The function returns the name of ini file.</return>
        </member>
        <member name="P:PRISM.XMLFileReader.Initialized">
            <summary>
            This routine returns a boolean showing if the file was initialized or not.
            </summary>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="P:PRISM.XMLFileReader.CaseSensitive">
            <summary>
            This routine returns a boolean showing if the name is case sensitive or not.
            </summary>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetNameCase(System.String)">
            <summary>
            This routine sets a name.
            </summary>
            <param name="aName">The name to be set.</param>
            <return>The function returns a string.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetRoot">
            <summary>
            Returns the root element of the XML document
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.GetLastSection">
            <summary>
            The function gets the last section.
            </summary>
            <return>The function returns the last section as System.Xml.XmlElement.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetSection(System.String)">
            <summary>
            The function gets a section as System.Xml.XmlElement.
            </summary>
            <param name="sectionName">The name of a section.</param>
            <return>The function returns a section as System.Xml.XmlElement.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetItem(System.String,System.String)">
            <summary>
            The function gets an item.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <return>The function returns a XML element.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetIniSection(System.String,System.String)">
            <summary>
            Legacy function name; calls SetXMLSection
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.SetXMLSection(System.String,System.String)">
            <summary>
            The function sets the ini section name.
            </summary>
            <param name="oldSection">The name of the old ini section name.</param>
            <param name="newSection">The new name for the ini section.</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetIniValue(System.String,System.String,System.String)">
            <summary>
            Legacy function name; calls SetXMLValue
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.SetXMLValue(System.String,System.String,System.String)">
            <summary>
            The function sets a new value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.DeleteSection(System.String)">
            <summary>
            The function deletes a section in the file.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <return>The function returns a boolean that shows if the delete was completed.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.DeleteItem(System.String,System.String)">
            <summary>
            The function deletes a item in a specific section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <return>The function returns a boolean that shows if the delete was completed.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetIniKey(System.String,System.String,System.String)">
            <summary>
            Legacy function name; calls SetXmlKey
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.SetXmlKey(System.String,System.String,System.String)">
            <summary>
            The function sets a new value for the "key" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "key".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetIniValue(System.String,System.String)">
            <summary>
            Legacy function name; calls GetXMLValue
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.GetXMLValue(System.String,System.String)">
             <summary>
             The function gets the name of the "value" attribute.
             </summary>
             <param name="sectionName">The name of the section.</param>
             <param name="keyName">The name of the key.</param>
            <return>The function returns the name of the "value" attribute.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetIniComments(System.String)">
            <summary>
            Legacy function name; calls GetXmlSectionComments
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.GetXmlSectionComments(System.String)">
             <summary>
             The function gets the comments for a section name.
             </summary>
             <param name="sectionName">The name of the section.</param>
            <return>The function returns a string collection with comments</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetIniComments(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Legacy function name; calls SetXMLComments
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.SetXMLComments(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             The function sets a the comments for a section name.
             </summary>
             <param name="sectionName">The name of the section.</param>
             <param name="comments">A string collection.</param>
            <return>The function returns a Boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.UpdateSections">
            <summary>
            The subroutine updades the sections.
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReader.AllSections">
            <summary>
            The subroutine gets the sections.
            </summary>
            <return>The subroutine returns a strin collection of sections.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetItemsInSection(System.String,PRISM.XMLFileReader.XMLItemTypeEnum)">
            <summary>
            The function gets a collection of items for a section name.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="itemType">Item type.</param>
            <return>The function returns a string colection of items in a section.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.AllKeysInSection(System.String)">
            <summary>
            Gets a collection of keys in a section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <return>The function returns a string colection of all the keys in a section.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.AllValuesInSection(System.String)">
            <summary>
            Gets a collection of values in a section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <return>The function returns a string colection of all the values in a section.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.AllItemsInSection(System.String)">
            <summary>
            Gets a collection of items in a section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <return>The function returns a string colection of all the items in a section.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetCustomIniAttribute(System.String,System.String,System.String)">
            <summary>
            Gets a custom attribute name.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="attributeName">The name of the attribute.</param>
            <return>The function returns a string.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetCustomIniAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            Sets a custom attribute name.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="attributeValue">The value of the attribute.</param>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.CreateSection(System.String)">
            <summary>
            Creates a section name.
            </summary>
            <param name="sectionName">The name of the section to be created.</param>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.CreateItem(System.String,System.String,System.String)">
            <summary>
            Creates a section name.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value to be created.</param>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.ManualParseXmlOrIniFile(System.String)">
            <summary>
            Manually read a XML or .INI settings file line-by-line, extracting out any settings in the expected format
            </summary>
            <param name="strFilePath"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.XMLFileReader.ParseLineManual(System.String,System.Xml.XmlDocument)">
            <summary>Manually parses a line to extract the settings information
            Supports the traditional .Ini file format
            Also supports the 'key="KeyName" value="Value"' method used in XML settings files
            If success, then adds attributes to the doc var</summary>
            <param name="strLine">The name of the string to be parse.</param>
            <param name="doc">The name of the System.Xml.XmlDocument.</param>
            <returns>True if success, false if not a recognized line format</returns>
        </member>
        <member name="P:PRISM.XMLFileReader.OutputFilename">
            <summary>
            It Sets or Gets the output file name.
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.Save">
            <summary>
            It saves the data to the Xml output file.
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReader.XmlDoc">
            <summary>
            Gets the System.Xml.XmlDocument.
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReader.XML">
            <summary>
            Converts an XML document to a string.
            </summary>
            <return>It returns the XML document formatted as a string.</return>
        </member>
        <member name="T:PRISM.XMLFileReaderNotInitializedException">
            <summary>
            Exception thrown when a method is accessed before the reader has been initialized
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReaderNotInitializedException.Message">
            <summary>
            Returns a message describing this exception
            </summary>
        </member>
        <member name="T:PRISM.XmlSettingsFileAccessor">
            <summary>
            This class can be used to read or write settings in an Xml settings file
              Based on a class from the DMS Analysis Manager software written by Dave Clark and Gary Kiebel (PNNL, Richland, WA)
              Additional features added by Matthew Monroe for the Department of Energy (PNNL, Richland, WA) in October 2003
            </summary>
        </member>
        <member name="P:PRISM.XmlSettingsFileAccessor.XMLFilePath">
            <summary>
            XML file path
            </summary>
            <remarks>Call LoadSettings to initialize, even if simply saving settings</remarks>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.LoadSettings">
            <summary>
            Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive
            </summary>
            <return>The function returns a boolean that shows if the file was successfully loaded.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.LoadSettings(System.String)">
            <summary>
            Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive
            </summary>
            <param name="XmlSettingsFilePath">The path to the XML settings file.</param>
            <return>The function returns a boolean that shows if the file was successfully loaded.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.LoadSettings(System.String,System.Boolean)">
            <summary>
            Loads the settings for the defined Xml Settings File
            </summary>
            <param name="XmlSettingsFilePath">The path to the XML settings file.</param>
            <param name="isCaseSensitive">Case sensitive names if True. Non-case sensitive if false.</param>
            <remarks>If case sensitive names are in place, all section and key names must be lowercase</remarks>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.ManualParseXmlOrIniFile(System.String)">
            <summary>
            Parse an XML settings file
            </summary>
            <param name="strFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SaveSettings">
            <summary>
            Saves the settings for the defined Xml Settings File.  Note that you must call LoadSettings to initialize the class prior to setting any values.
            </summary>
            <return>The function returns a boolean that shows if the file was successfully saved.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SectionPresent(System.String)">
            <summary>
            Checks if a section is present in the settings file.
            </summary>
            <param name="sectionName">The name of the section to look for.</param>
            <return>The function returns a boolean that shows if the section is present.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.String,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns the name of the "value" attribute as a string.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns boolean True if the "value" attribute is "true".  Otherwise, returns boolean False.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int16)">
            <summary>
            Get the value for a given parameter in a given section
            </summary>
            <param name="sectionName">Section name</param>
            <param name="keyName">Parameter name</param>
            <param name="valueIfMissing">Value if missing</param>
            <returns>A short</returns>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int32)">
            <summary>
            Get the value for a given parameter in a given section
            </summary>
            <param name="sectionName">Section name</param>
            <param name="keyName">Parameter name</param>
            <param name="valueIfMissing">Value if missing</param>
            <returns>An integer</returns>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int64)">
            <summary>
            Get the value for a given parameter in a given section
            </summary>
            <param name="sectionName">Section name</param>
            <param name="keyName">Parameter name</param>
            <param name="valueIfMissing">Value if missing</param>
            <returns>A long</returns>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Single)">
            <summary>
            Get the value for a given parameter in a given section
            </summary>
            <param name="sectionName">Section name</param>
            <param name="keyName">Parameter name</param>
            <param name="valueIfMissing">Value if missing</param>
            <returns>A float</returns>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Double)">
            <summary>
            Get the value for a given parameter in a given section
            </summary>
            <param name="sectionName">Section name</param>
            <param name="keyName">Parameter name</param>
            <param name="valueIfMissing">Value if missing</param>
            <returns>A double</returns>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.String)">
            <summary>
            Get the value for a given parameter in a given section
            </summary>
            <param name="sectionName">Section name</param>
            <param name="keyName">Parameter name</param>
            <param name="valueIfMissing">Value if missing</param>
            <returns>A string</returns>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Boolean)">
            <summary>
            Get the value for a given parameter in a given section
            </summary>
            <param name="sectionName">Section name</param>
            <param name="keyName">Parameter name</param>
            <param name="valueIfMissing">Value if missing</param>
            <returns>A boolean</returns>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int16,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>
            The function returns the name of the "value" attribute as a short.
            If "value" is "true" returns -1.  If "value" is "false" returns 0.
            </return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int32,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>
            The function returns the name of the "value" attribute as an integer.
            If "value" is "true" returns -1.  If "value" is "false" returns 0.
            </return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int64,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>
            The function returns the name of the "value" attribute as a long.
            If "value" is "true" returns -1.  If "value" is "false" returns 0.
            </return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Single,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>
            The function returns the name of the "value" attribute as a float.
            If "value" is "true" returns -1.  If "value" is "false" returns 0.
            </return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Double,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>
            The function returns the name of the "value" attribute as a double.
            If "value" is "true" returns -1.  If "value" is "false" returns 0.
            </return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetIniFilePath(System.String)">
            <summary>
            Legacy function name; calls SetXMLFilePath
            </summary>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetXMLFilePath(System.String)">
            <summary>
            The function sets the path to the Xml Settings File.
            </summary>
            <param name="XmlSettingsFilePath">The path to the XML settings file.</param>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.String)">
            <summary>
            The function sets a new String value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Boolean)">
            <summary>
            The function sets a new Boolean value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int16)">
            <summary>
            The function sets a new Short value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int32)">
            <summary>
            The function sets a new Integer value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int64)">
            <summary>
            The function sets a new Long value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Single)">
            <summary>
            The function sets a new Single value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Double)">
            <summary>
            The function sets a new Double value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.RenameSection(System.String,System.String)">
            <summary>
            The function renames a section.
            </summary>
            <param name="sectionNameOld">The name of the old XML section name.</param>
            <param name="sectionNameNew">The new name for the XML section.</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="T:PRISM.ZipTools">
            <summary>
            Makes using a file archiving program easier.
            </summary>
            <remarks>There are a routines to create an archive, extract files from an existing archive,
            and to verify an existing archive.
            </remarks>
        </member>
        <member name="F:PRISM.ZipTools.m_WorkDir">
            <summary>
            Working directory
            </summary>
        </member>
        <member name="F:PRISM.ZipTools.m_ZipProgramPath">
            <summary>
            Program used for zipping and unzipping files
            </summary>
        </member>
        <member name="F:PRISM.ZipTools.m_WaitInterval">
            <summary>
            Interval, in milliseconds, to sleep between checking the status of a zip or unzip task
            </summary>
        </member>
        <member name="F:PRISM.ZipTools.m_Logger">
            <summary>
            Logging class
            </summary>
        </member>
        <member name="M:PRISM.ZipTools.MakeZipFile(System.String,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="cmdOptions">The zip program command line arguments.</param>
            <param name="outputFile">The file path of the output zip file.</param>
            <param name="inputSpec">The files and/or directories to archive.</param>
        </member>
        <member name="M:PRISM.ZipTools.UnzipFile(System.String,System.String,System.String)">
            <summary>
            Extract files from a zip file.
            </summary>
            <param name="cmdOptions">The zip program command line arguments.</param>
            <param name="zipFilePath">The file path of the zip file from which to extract files.</param>
            <param name="outFolderPath">The path where you want to put the extracted files.</param>
        </member>
        <member name="P:PRISM.ZipTools.CreateNoWindow">
            <summary>
            Defines whether a window is displayed when calling the zipping program.
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.WindowStyle">
            <summary>
            Window style to use when CreateNoWindow is False.
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.WorkDir">
            <summary>
            The working directory for the zipping process.
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.ZipFilePath">
            <summary>
            The path to the zipping program.
            </summary>
        </member>
        <member name="M:PRISM.ZipTools.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ZipTools class.
            </summary>
            <param name="workDir">The working directory for the zipping process.</param>
            <param name="zipFilePath">The path to the zipping program.</param>
        </member>
        <member name="M:PRISM.ZipTools.VerifyZippedFile(System.String)">
            <summary>
            Verifies the integrity of a zip file.
            </summary>
            <param name="zipFilePath">The file path of the zip file to verify.</param>
        </member>
        <member name="M:PRISM.ZipTools.RegisterEventLogger(PRISM.Logging.BaseLogger)">
            <summary>
            Associate a logger with this class
            </summary>
        </member>
        <member name="M:PRISM.ZipTools.RegisterEventLogger(PRISM.ILogger)">
            <summary>
            Associate an event logger with this class
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.NotifyOnEvent">
            <summary>
            Gets or Sets notify on event.
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.NotifyOnException">
            <summary>
            Gets or Sets notify on exception.
            </summary>
        </member>
    </members>
</doc>
